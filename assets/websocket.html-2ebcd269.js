import{_ as o,M as p,p as c,q as i,R as s,t as n,N as a,a1 as l}from"./framework-c8e009f3.js";const u={},k={id:"websocket",tabindex:"-1"},r=s("a",{class:"header-anchor",href:"#websocket","aria-hidden":"true"},"#",-1),d={href:"https://square.github.io/okhttp/",target:"_blank",rel:"noopener noreferrer"},v=l(`<h2 id="创建-websocket-客户端" tabindex="-1"><a class="header-anchor" href="#创建-websocket-客户端" aria-hidden="true">#</a> 创建 websocket 客户端</h2><ul><li>创建一个 http client，可以设定 client 是否重连，心跳等功能</li><li>创建一个 request 请求对象，采用什么协议 ws 或 wss 、服务器、端口都能内容</li><li>设置监听，当 websocket 生命周期内的一些事情。</li><li>设置上面的操作以后，打开链接，创建 webSocket 客户端。</li><li>用 webSocket 客户端 发送消息 <code>webSocket.send(&quot;你好服务器&quot;)</code>;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">importPackage</span><span class="token punctuation">(</span>Packages<span class="token punctuation">[</span><span class="token string">&quot;okhttp3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//导入包</span>
<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;ws://192.168.31.164:9317&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//vscode  插件的ip地址，</span>
client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清理一次</span>
myListener <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">onOpen</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webSocket<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;onOpen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//打开链接后，想服务器端发送一条消息</span>
    <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    json<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    json<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">device_name</span><span class="token operator">:</span> <span class="token string">&quot;模拟设备&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">client_version</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
      <span class="token literal-property property">app_version</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
      <span class="token literal-property property">app_version_code</span><span class="token operator">:</span> <span class="token string">&quot;233&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
    webSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webSocket<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//msg可能是字符串，也可能是byte数组，取决于服务器送的内容</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onClosing</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webSocket<span class="token punctuation">,</span> code<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;正在关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onClosed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webSocket<span class="token punctuation">,</span> code<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;已关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onFailure</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webSocket<span class="token punctuation">,</span> t<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> webSocket <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newWebSocket</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketListener</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建链接</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 防止主线程退出</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 websocket 服务器端，一样支持，可以参考 okhttp 官网。</p>`,4);function m(b,f){const t=p("Badge"),e=p("ExternalLinkIcon");return c(),i("div",null,[s("h1",k,[r,n(" websocket "),a(t,{type:"tip",text:"4.2.8",vertical:"middle"}),n(),a(t,{type:"tip",text:"实验",vertical:"middle"})]),s("p",null,[n("websocket 模块，采用 okhttp3 实现，本模块中包含了 okhttp3 核心所有的类，下面讲解其基本的使用方法，更多的使用规则,可参考："),s("a",d,[n("okhttp"),a(e)]),n("，这里涉及一些线程安全问题，请学习多线程，生命周期等内容。")]),v])}const h=o(u,[["render",m],["__file","websocket.html.vue"]]);export{h as default};
