import{_ as c,M as i,p,q as l,N as s,R as n,t as a,a1 as o}from"./framework-c8e009f3.js";const u={},r=n("h1",{id:"图色模块-images",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#图色模块-images","aria-hidden":"true"},"#"),a(" 图色模块-Images")],-1),d=o(`<p>images 模块提供了一些手机设备中常见的图片处理函数，包括截图、读写图片、图片剪裁、旋转、二值化、找色找图等。 该模块分为两个部分，找图找色部分和图片处理部分。 需要注意的是，image 对象创建后尽量在不使用时进行回收，同时避免循环创建大量图片。因为图片是一种占用内存比较大的资源，尽管 Auto.js 通过各种方式（比如图片缓存机制、垃圾回收时回收图片、脚本结束时回收所有图片）尽量降低图片资源的泄漏和内存占用，但是糟糕的代码仍然可以占用大量内存。 Image 对象通过调用<code>recycle()</code>函数来回收。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 读取图片</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;./1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//对图片进行操作</span>
<span class="token operator">...</span>
<span class="token comment">// 回收图片</span>
img<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例外的是，<code>caputerScreen()</code>返回的图片不需要回收。</p><h1 id="图片处理" tabindex="-1"><a class="header-anchor" href="#图片处理" aria-hidden="true">#</a> 图片处理</h1><h2 id="images-read-path" tabindex="-1"><a class="header-anchor" href="#images-read-path" aria-hidden="true">#</a> images.read(path)</h2><ul><li><code>path</code> {string} 图片路径</li><li><code>retrun</code> {Image}</li></ul><p>读取在路径 path 的图片文件并返回一个 Image 对象。如果文件不存在或者文件无法解码则返回 null。</p><h2 id="images-load-url" tabindex="-1"><a class="header-anchor" href="#images-load-url" aria-hidden="true">#</a> images.load(url)</h2><ul><li><code>url</code> {string} 图片 URL 地址</li><li><code>retrun</code> {Image}</li></ul><p>加载在地址 URL 的网络图片并返回一个 Image 对象。如果地址不存在或者图片无法解码则返回 null。</p><h2 id="images-copy-img" tabindex="-1"><a class="header-anchor" href="#images-copy-img" aria-hidden="true">#</a> images.copy(img)</h2><ul><li><code>img</code> {Image} 图片</li><li><code>retrun</code> {Image}</li></ul><p>复制一张图片并返回新的副本。该函数会完全复制 img 对象的数据。</p><h2 id="images-save-image-path-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-save-image-path-format-png-quality-100" aria-hidden="true">#</a> images.save(image, path[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code>image</code> {Image} 图片</li><li><code>path</code> {string} 路径</li><li><code>format</code> {string} 图片格式，可选的值为: <ul><li><code>png</code></li><li><code>jpeg</code>/<code>jpg</code></li><li><code>webp</code></li></ul></li><li><code>quality</code> {number} 图片质量，为 0~100 的整数值</li></ul><p>把图片 image 以 PNG 格式保存到 path 中。如果文件不存在会被创建；文件存在会被覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//把图片压缩为原来的一半质量并保存</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jpg&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-frombase64-base64" tabindex="-1"><a class="header-anchor" href="#images-frombase64-base64" aria-hidden="true">#</a> images.fromBase64(base64)</h2><ul><li><code>base64</code> {string} 图片的 Base64 数据</li><li><code>retrun</code> {Image}</li></ul><p>解码 Base64 数据并返回解码后的图片 Image 对象。如果 base64 无法解码则返回<code>null</code>。</p><h2 id="images-tobase64-image-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-tobase64-image-format-png-quality-100" aria-hidden="true">#</a> images.toBase64(image[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code>image</code> {image} 图片</li><li><code>format</code> {string} 图片格式，可选的值为: <ul><li><code>png</code></li><li><code>jpeg</code>/<code>jpg</code></li><li><code>webp</code></li></ul></li><li><code>quality</code> {number} 图片质量，为 0~100 的整数值</li><li><code>retrun</code> {string}</li></ul><p>把图片编码为 base64 数据并返回。</p><h2 id="images-frombytes-bytes" tabindex="-1"><a class="header-anchor" href="#images-frombytes-bytes" aria-hidden="true">#</a> images.fromBytes(bytes)</h2><ul><li><code>bytes</code> {byte[]} 字节数组</li></ul><p>解码字节数组 bytes 并返回解码后的图片 Image 对象。如果 bytes 无法解码则返回<code>null</code>。</p><h2 id="images-tobytes-img-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-tobytes-img-format-png-quality-100" aria-hidden="true">#</a> images.toBytes(img[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code>img</code> {image} 图片</li><li><code>format</code> {string} 图片格式，可选的值为: <ul><li><code>png</code></li><li><code>jpeg</code>/<code>jpg</code></li><li><code>webp</code></li></ul></li><li><code>quality</code> {number} 图片质量，为 0~100 的整数值</li><li><code>retrun</code> {byte[]}</li></ul><p>把图片编码为字节数组并返回。</p><h2 id="images-clip-img-x-y-w-h" tabindex="-1"><a class="header-anchor" href="#images-clip-img-x-y-w-h" aria-hidden="true">#</a> images.clip(img, x, y, w, h)</h2><ul><li><code>img</code> {Image} 图片</li><li><code>x</code> {number} 剪切区域的左上角横坐标</li><li><code>y</code> {number} 剪切区域的左上角纵坐标</li><li><code>w</code> {number} 剪切区域的宽度</li><li><code>h</code> {number} 剪切区域的高度</li><li><code>retrun</code> {Image}</li></ul><p>从图片 img 的位置(x, y)处剪切大小为 w * h 的区域，并返回该剪切区域的新图片。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> src <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> clip <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>clip<span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/clip.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-resize-img-size-interpolation" tabindex="-1"><a class="header-anchor" href="#images-resize-img-size-interpolation" aria-hidden="true">#</a> images.resize(img, size[, interpolation])</h2>`,34),m=n("li",null,[n("code",null,"img"),a(" {Image} 图片")],-1),g=n("li",null,[n("code",null,"size"),a(" {Array} 两个元素的数组[w, h]，分别表示宽度和高度；如果只有一个元素，则宽度和高度相等")],-1),k=n("code",null,"interpolation",-1),h=n("li",null,[n("code",null,"NEAREST"),a(" 最近邻插值")],-1),v=n("li",null,[n("code",null,"LINEAR"),a(" 线性插值（默认）")],-1),b=n("li",null,[n("code",null,"AREA"),a(" 区域插值")],-1),f=n("li",null,[n("code",null,"CUBIC"),a(" 三次样条插值")],-1),_=n("code",null,"LANCZOS4",-1),y={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[n("code",null,"retrun"),a(" {Image}")],-1),q=n("p",null,[a("调整图片大小，并返回调整后的图片。例如把图片放缩为 200*300："),n("code",null,"images.resize(img, [200, 300])"),a("。")],-1),I={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"images-scale-img-fx-fy-interpolation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-scale-img-fx-fy-interpolation","aria-hidden":"true"},"#"),a(" images.scale(img, fx, fy[, interpolation])")],-1),R=n("li",null,[n("code",null,"img"),a(" {Image} 图片")],-1),j=n("li",null,[n("code",null,"fx"),a(" {number} 宽度放缩倍数")],-1),C=n("li",null,[n("code",null,"fy"),a(" {number} 高度放缩倍数")],-1),A=n("code",null,"interpolation",-1),B=n("li",null,[n("code",null,"NEAREST"),a(" 最近邻插值")],-1),E=n("li",null,[n("code",null,"LINEAR"),a(" 线性插值（默认）")],-1),S=n("li",null,[n("code",null,"AREA"),a(" 区域插值")],-1),T=n("li",null,[n("code",null,"CUBIC"),a(" 三次样条插值")],-1),M=n("code",null,"LANCZOS4",-1),N={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121",target:"_blank",rel:"noopener noreferrer"},z=n("li",null,[n("code",null,"retrun"),a(" {Image}")],-1),O=n("code",null,"images.scale(img, 0.5, 0.5)",-1),G={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"images-rotate-img-degress-x-y",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-rotate-img-degress-x-y","aria-hidden":"true"},"#"),a(" images.rotate(img, degress[, x, y])")],-1),F=o('<ul><li><code>img</code> {Image} 图片</li><li><code>degress</code> {number} 旋转角度。</li><li><code>x</code> {number} 旋转中心 x 坐标，默认为图片中点</li><li><code>y</code> {number} 旋转中心 y 坐标，默认为图片中点</li><li><code>retrun</code> {Image}</li></ul><p>将图片逆时针旋转 degress 度，返回旋转后的图片对象。 例如逆时针旋转 90 度为<code>images.rotate(img, 90)</code>。</p><h2 id="images-concat-img1-img2-direction" tabindex="-1"><a class="header-anchor" href="#images-concat-img1-img2-direction" aria-hidden="true">#</a> images.concat(img1, img2, [direction])</h2>',3),P=o('<ul><li><code>img1</code> {Image} 图片 1</li><li><code>img2</code> {Image} 图片 2</li><li><code>direction</code> {string} 连接方向，默认为&quot;RIGHT&quot;，可选的值有： <ul><li><code>LEFT</code> 将图片 2 接到图片 1 左边</li><li><code>RIGHT</code> 将图片 2 接到图片 1 右边</li><li><code>TOP</code> 将图片 2 接到图片 1 上边</li><li><code>BOTTOM</code> 将图片 2 接到图片 1 下边</li></ul></li><li><code>retrun</code> {Image}</li></ul><p>连接两张图片，并返回连接后的图像。如果两张图片大小不一致，小的那张将适当居中。</p><h2 id="images-grayscale-img" tabindex="-1"><a class="header-anchor" href="#images-grayscale-img" aria-hidden="true">#</a> images.grayscale(img)</h2>',3),V=n("ul",null,[n("li",null,[n("code",null,"img"),a(" {Image} 图片")]),n("li",null,[n("code",null,"retrun"),a(" {Image}")])],-1),U=n("p",null,"灰度化图片，并返回灰度化后的图片。",-1),Y=n("h2",{id:"image-threshold-img-threshold-maxval-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#image-threshold-img-threshold-maxval-type","aria-hidden":"true"},"#"),a(" image.threshold(img, threshold, maxVal[, type])")],-1),D=n("li",null,[n("code",null,"img"),a(" {Image} 图片")],-1),H=n("li",null,[n("code",null,"threshold"),a(" {number} 阈值")],-1),Q=n("li",null,[n("code",null,"maxVal"),a(" {number} 最大值")],-1),Z=n("code",null,"type",-1),X={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#gaa9e58d2860d4afa658ef70a9b1115576",target:"_blank",rel:"noopener noreferrer"},J=o("<ul><li><code>BINARY</code></li><li><code>BINARY_INV</code></li><li><code>TRUNC</code></li><li><code>TOZERO</code></li><li><code>TOZERO_INV</code></li><li><code>OTSU</code></li><li><code>TRIANGLE</code></li></ul>",1),W=n("li",null,[n("code",null,"retrun"),a(" {Image}")],-1),K=n("code",null,'images.threshold(img, 100, 255, "BINARY")',-1),$={href:"https://blog.csdn.net/u012566751/article/details/77046445",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57",target:"_blank",rel:"noopener noreferrer"},an=n("h2",{id:"images-adaptivethreshold-img-maxvalue-adaptivemethod-thresholdtype-blocksize-c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-adaptivethreshold-img-maxvalue-adaptivemethod-thresholdtype-blocksize-c","aria-hidden":"true"},"#"),a(" images.adaptiveThreshold(img, maxValue, adaptiveMethod, thresholdType, blockSize, C)")],-1),sn=o("<ul><li><code>img</code> {Image} 图片</li><li><code>maxValue</code> {number} 最大值</li><li><code>adaptiveMethod</code> {string} 在一个邻域内计算阈值所采用的算法，可选的值有： <ul><li><code>MEAN_C</code> 计算出领域的平均值再减去参数 C 的值</li><li><code>GAUSSIAN_C</code> 计算出领域的高斯均值再减去参数 C 的值</li></ul></li><li><code>thresholdType</code> {string} 阈值化类型，可选的值有： <ul><li><code>BINARY</code></li><li><code>BINARY_INV</code></li></ul></li><li><code>blockSize</code> {number} 邻域块大小</li><li><code>C</code> {number} 偏移值调整量</li><li><code>retrun</code> {Image}</li></ul>",1),en={href:"https://blog.csdn.net/guduruyu/article/details/68059450",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#ga72b913f352e4a1b1b397736707afcde3",target:"_blank",rel:"noopener noreferrer"},on=n("h2",{id:"images-cvtcolor-img-code-dstcn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-cvtcolor-img-code-dstcn","aria-hidden":"true"},"#"),a(" images.cvtColor(img, code[, dstCn])")],-1),cn=n("li",null,[n("code",null,"img"),a(" {Image} 图片")],-1),pn=n("code",null,"code",-1),ln={href:"https://docs.opencv.org/3.4.4/d8/d01/group__imgproc__color__conversions.html#ga4e0972be5de079fed4e3a10e24ef5ef0",target:"_blank",rel:"noopener noreferrer"},un=n("ul",null,[n("li",null,[n("code",null,"BGR2GRAY"),a(" BGR 转换为灰度")]),n("li",null,[n("code",null,"BGR2HSV"),a(" BGR 转换为 HSV")]),n("li",null,"``")],-1),rn=n("li",null,[n("code",null,"dstCn"),a(" {number} 目标图像的颜色通道数量，如果不填写则根据其他参数自动决定。")],-1),dn=n("li",null,[n("code",null,"retrun"),a(" {Image}")],-1),mn={href:"https://blog.csdn.net/u011574296/article/details/70896811?locationNum=14&fps=1",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://docs.opencv.org/3.4.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab",target:"_blank",rel:"noopener noreferrer"},kn=n("h2",{id:"images-inrange-img-lowerbound-upperbound",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-inrange-img-lowerbound-upperbound","aria-hidden":"true"},"#"),a(" images.inRange(img, lowerBound, upperBound)")],-1),hn=o('<ul><li><code>img</code> {Image} 图片</li><li><code>lowerBound</code> {string} | {number} 颜色下界</li><li><code>upperBound</code> {string} | {number} 颜色下界</li><li><code>retrun</code> {Image}</li></ul><p>将图片二值化，在 lowerBound~upperBound 范围以外的颜色都变成 0，在范围以内的颜色都变成 255。 例如<code>images.inRange(img, &quot;#000000&quot;, &quot;#222222&quot;)</code>。</p><h2 id="images-interval-img-color-interval" tabindex="-1"><a class="header-anchor" href="#images-interval-img-color-interval" aria-hidden="true">#</a> images.interval(img, color, interval)</h2>',3),vn=o('<ul><li><code>img</code> {Image} 图片</li><li><code>color</code> {string} | {number} 颜色</li><li><code>interval</code> {number} 每个通道的范围间</li><li><code>retrun</code> {Image}</li></ul><p>将图片二值化，在 color-interval ~ color+interval 范围以外的颜色都变成 0，在范围以内的颜色都变成 255。这里对 color 的加减是对每个通道而言的。<br> 例如<code>images.interval(img, &quot;#888888&quot;, 16)</code>，每个通道的颜色值均为 0x88，加减 16 后的范围是[0x78, 0x98]，因此这个代码将把#787878~#989898 的颜色变成#FFFFFF，而把这个范围以外的变成#000000。</p><h2 id="images-blur-img-size-anchor-type" tabindex="-1"><a class="header-anchor" href="#images-blur-img-size-anchor-type" aria-hidden="true">#</a> images.blur(img, size[, anchor, type])</h2>',3),bn=o("<ul><li><code>img</code> {Image} 图片</li><li><code>size</code> {Array} 定义滤波器的大小，如[3, 3]</li><li><code>anchor</code> {Array} 指定锚点位置(被平滑点)，默认为图像中心</li><li><code>type</code> {string} 推断边缘像素类型，默认为&quot;DEFAULT&quot;，可选的值有： <ul><li><code>CONSTANT</code> iiiiii|abcdefgh|iiiiiii with some specified i</li><li><code>REPLICATE</code> aaaaaa|abcdefgh|hhhhhhh</li><li><code>REFLECT</code> fedcba|abcdefgh|hgfedcb</li><li><code>WRAP</code> cdefgh|abcdefgh|abcdefg</li><li><code>REFLECT_101</code> gfedcb|abcdefgh|gfedcba</li><li><code>TRANSPARENT</code> uvwxyz|abcdefgh|ijklmno</li><li><code>REFLECT101</code> same as BORDER_REFLECT_101</li><li><code>DEFAULT</code> same as BORDER_REFLECT_101</li><li><code>ISOLATED</code> do not look outside of ROI</li></ul></li><li><code>retrun</code> {Image}</li></ul>",1),fn=n("br",null,null,-1),_n={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://docs.opencv.org/3.4.4/d4/d86/group__imgproc__filter.html#ga8c45db9afe636703801b0b2e440fce37",target:"_blank",rel:"noopener noreferrer"},xn=n("h2",{id:"images-medianblur-img-size",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-medianblur-img-size","aria-hidden":"true"},"#"),a(" images.medianBlur(img, size)")],-1),qn=n("ul",null,[n("li",null,[n("code",null,"img"),a(" {Image} 图片")]),n("li",null,[n("code",null,"size"),a(" {Array} 定义滤波器的大小，如[3, 3]")]),n("li",null,[n("code",null,"retrun"),a(" {Image}")])],-1),In=n("br",null,null,-1),wn={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://docs.opencv.org/3.4.4/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9",target:"_blank",rel:"noopener noreferrer"},jn=n("h2",{id:"images-gaussianblur-img-size-sigmax-sigmay-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-gaussianblur-img-size-sigmax-sigmay-type","aria-hidden":"true"},"#"),a(" images.gaussianBlur(img, size[, sigmaX, sigmaY, type])")],-1),Cn=o('<ul><li><code>img</code> {Image} 图片</li><li><code>size</code> {Array} 定义滤波器的大小，如[3, 3]</li><li><code>sigmaX</code> {number} x 方向的标准方差，不填写则自动计算</li><li><code>sigmaY</code> {number} y 方向的标准方差，不填写则自动计算</li><li><code>type</code> {string} 推断边缘像素类型，默认为&quot;DEFAULT&quot;，参见<a href="#imagesblurimg-size-anchor-type">images.blur</a></li><li><code>retrun</code> {Image}</li></ul>',1),An=n("br",null,null,-1),Bn={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},En={href:"https://docs.opencv.org/3.4.4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1",target:"_blank",rel:"noopener noreferrer"},Sn=n("h2",{id:"images-mattoimage-mat",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-mattoimage-mat","aria-hidden":"true"},"#"),a(" images.matToImage(mat)")],-1),Tn=o(`<ul><li><code>mat</code> {Mat} OpenCV 的 Mat 对象</li><li><code>retrun</code> {Image}</li></ul><p>把 Mat 对象转换为 Image 对象。</p><h1 id="找图找色" tabindex="-1"><a class="header-anchor" href="#找图找色" aria-hidden="true">#</a> 找图找色</h1><h2 id="images-requestscreencapture-landscape" tabindex="-1"><a class="header-anchor" href="#images-requestscreencapture-landscape" aria-hidden="true">#</a> images.requestScreenCapture([landscape])</h2><ul><li><code>landscape</code> {boolean} 截屏方向 <ul><li><code>true</code> 横屏截图</li><li><code>false</code> 竖屏截图</li><li>不指定值，由当前设备屏幕方向决定截图方向</li></ul></li><li><code>return</code> {boolean}</li></ul><p>向系统申请屏幕截图权限，返回是否请求成功,仅需执行一次 建议在本软件界面运行该函数，在其他软件界面运行时容易出现一闪而过的黑屏现象。 示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//请求截图</span>
<span class="token comment">//每次使用该函数都会弹出截图权限请求，建议选择“总是允许”。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;请求截图失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//连续截图 10 张图片(间隔 1 秒)并保存到存储卡目录</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/screencapture&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//安卓版本高于 Android 9</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>device<span class="token punctuation">.</span>sdkInt <span class="token operator">&gt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//等待截屏权限申请并同意</span>
  threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">packageName</span><span class="token punctuation">(</span><span class="token string">&quot;com.android.systemui&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;立即开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;立即开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//申请截屏权限</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;请求截图失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-capturescreen" tabindex="-1"><a class="header-anchor" href="#images-capturescreen" aria-hidden="true">#</a> images.captureScreen()</h2><ul><li><code>return</code> {Image}</li></ul><p>截取当前屏幕并返回一个 Image 对象。 没有截图权限时执行该函数会抛出 SecurityException。<br> 该函数不会返回 null，两次调用可能返回相同的 Image 对象。这是因为设备截图的更新需要一定的时间，短时间内（一般来说是 16ms）连续调用则会返回同一张截图。 截图需要转换为 Bitmap 格式，从而该函数执行需要一定的时间(0~20ms)。<br> 另外在 requestScreenCapture()执行成功后需要一定时间后才有截图可用，因此如果立即调用 captureScreen()，会等待一定时间后(一般为几百 ms)才返回截图。 例子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//请求横屏截图</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//截图</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取在点(100, 100)的颜色值</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">pixel</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//显示该颜色值</span>
<span class="token function">toast</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-capturescreen-path" tabindex="-1"><a class="header-anchor" href="#images-capturescreen-path" aria-hidden="true">#</a> images.captureScreen(path)</h2><ul><li><code>path</code> {string} 截图保存路径</li></ul><p>截取当前屏幕并以 PNG 格式保存到 path 中。如果文件不存在会被创建；文件存在会被覆盖。 该函数不会返回任何值。该函数也可以作为全局函数使用。</p><h2 id="images-pixel-image-x-y" tabindex="-1"><a class="header-anchor" href="#images-pixel-image-x-y" aria-hidden="true">#</a> images.pixel(image, x, y)</h2><ul><li><code>image</code> {Image} 图片</li><li><code>x</code> {number} 要获取的像素的横坐标。</li><li><code>y</code> {number} 要获取的像素的纵坐标。</li></ul><p>返回图片 image 在点(x, y)处的像素的 ARGB 值。 该值的格式为 0xAARRGGBB，是一个&quot;32 位整数&quot;(虽然 JavaScript 中并不区分整数类型和其他数值类型)。<br> 坐标系以图片左上角为原点。以图片左侧边为 y 轴，上侧边为 x 轴。</p><h2 id="images-readpixels-path" tabindex="-1"><a class="header-anchor" href="#images-readpixels-path" aria-hidden="true">#</a> images.readPixels(path)</h2><ul><li><p><code>path</code> {string} 图片的地址</p></li><li><p><code>return</code> {Object} 包括图片的像素数据和宽高，{data,width,height}</p></li></ul><p>读取图片的像素数据和宽高。</p><h2 id="images-findcolor-image-color-options" tabindex="-1"><a class="header-anchor" href="#images-findcolor-image-color-options" aria-hidden="true">#</a> images.findColor(image, color, [options])</h2><ul><li><code>image</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要寻找的颜色的 RGB 值。如果是一个整数，则以 0xRRGGBB 的形式代表 RGB 值（A 通道会被忽略）；如果是字符串，则以&quot;#RRGGBB&quot;代表其 RGB 值。</li><li><code>options</code> {Object} 可选项包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果 <code>region</code>只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定<code>region</code>选项，则找色区域为整张图片。</li><li><code>similarity</code> {number} 颜色相似度，范围为 0~1（越大越相似，1 为颜色相等，0 为任何颜色都能匹配）。</li><li><code>threshold</code> {number} 颜色相似度的临界值，范围为 0 ~ 255（越小越相似，0 为颜色相等，255 为任何颜色都能匹配）。默认为 4。</li><li><code>similarity</code>与<code>threshold</code>的换算为<code>similarity</code> = (255 - <code>threshold</code>) / 255 。二选一，同时存在则以<code>similarity</code>为准。</li></ul></li><li><code>return</code> {<a href="#point">Point</a>}</li></ul><p>在图片中寻找颜色 color。找到时返回找到的点 Point，找不到时返回 null。 该函数也可以作为全局函数使用。<br> 一个循环找色的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//循环找色，找到红色(#ff0000)时停止并报告坐标</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到红色，坐标为(&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个区域找色的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//读取本地图片/sdcard/1.png</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//判断图片是否加载成功</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>img<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没有该图片&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//在该图片中找色，指定找色区域为在位置(400, 500)的宽为 300 长为 200 的区域，指定找色临界值为 4</span>
<span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#00ff00&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦:&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findcolorinregion-img-color-x-y-width-height-threshold" tabindex="-1"><a class="header-anchor" href="#images-findcolorinregion-img-color-x-y-width-height-threshold" aria-hidden="true">#</a> images.findColorInRegion(img, color, [x, y, width, height, threshold])</h2><ul><li><code>return</code> {<a href="#point">Point</a>}</li></ul><p>区域找色的简便方法。 相当于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>images<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">threshold</span><span class="token operator">:</span> threshold<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-findcolorequals-img-color-x-y-width-height" tabindex="-1"><a class="header-anchor" href="#images-findcolorequals-img-color-x-y-width-height" aria-hidden="true">#</a> images.findColorEquals(img, color[, x, y, width, height])</h2><ul><li><code>img</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要寻找的颜色</li><li><code>x</code> {number} 找色区域的左上角横坐标</li><li><code>y</code> {number} 找色区域的左上角纵坐标</li><li><code>width</code> {number} 找色区域的宽度</li><li><code>height</code> {number} 找色区域的高度</li><li><code>return</code> {<a href="#point">Point</a>}</li></ul><p>在图片 img 指定区域中找到颜色和 color 完全相等的某个点，并返回该点的坐标；如果没有找到，则返回<code>null</code>。<br> 找色区域通过<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>指定，如果不指定找色区域，则在整张图片中寻找。 该函数也可以作为全局函数使用。<br> 示例： (通过找 QQ 红点的颜色来判断是否有未读消息)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;QQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findColorEquals</span><span class="token punctuation">(</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;#f64d30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;有未读消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没有未读消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findallpointsforcolor-img-color-options" tabindex="-1"><a class="header-anchor" href="#images-findallpointsforcolor-img-color-options" aria-hidden="true">#</a> images.findAllPointsForColor(img, color, [options])</h2><ul><li><p><code>img</code> {Image} 图片</p></li><li><p><code>color</code> {number | string} 要检测的颜色</p></li><li><p><code>options</code> {Object} 选项包括：</p><ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果 <code>region</code>只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定<code>region</code>选项，则找色区域为整张图片。</li><li><code>similarity</code> {number} 找色时颜色相似度，范围为 0 ~ 1（越大越相似，1 为颜色相等，0 为任何颜色都能匹配）。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为 0 ~ 255（越小越相似，0 为颜色相等，255 为任何颜色都能匹配）。默认为 4。</li><li><code>similarity</code>与<code>threshold</code>的换算为<code>similarity</code> = (255 - <code>threshold</code>) / 255 。二选一，同时存在则以<code>similarity</code>为准。</li></ul></li><li><p><code>return</code> {Array}</p></li></ul><p>在图片中寻找所有颜色为<code>color</code>的点。找到时返回找到的点 Point 的数组，找不到时返回<code>null</code>。 例如找出所有白色的点：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">findAllPointsForColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="images-findmulticolors-img-firstcolor-colors-options" tabindex="-1"><a class="header-anchor" href="#images-findmulticolors-img-firstcolor-colors-options" aria-hidden="true">#</a> images.findMultiColors(img, firstColor, colors[, options])</h2><ul><li><code>img</code> {Image} 要找色的图片</li><li><code>firstColor</code> {number} | {string} 第一个点的颜色</li><li><code>colors</code> {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]</li><li><code>options</code> {Object} 选项包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定 region 选项，则找色区域为整张图片。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为 0 ~ 255（越小越相似，0 为颜色相等，255 为任何颜色都能匹配）,默认为 4。threshold 和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</li></ul></li><li><code>return</code> {<a href="#point">Point</a>}</li></ul><p>多点找色，类似于按键精灵的多点找色，其过程如下：</p><ol><li>在图片 img 中找到颜色 firstColor 的位置(x0, y0)</li><li>对于数组 colors 的每个元素[x, y, color]，检查图片 img 在位置(x + x0, y + y0)上的像素是否是颜色 color，是的话返回(x0, y0)，否则继续寻找 firstColor 的位置，重新执行第 1 步</li><li>整张图片都找不到时返回<code>null</code></li></ol><p>例如:<code>images.findMultiColors(img, &quot;#123456&quot;, [[10, 20, &quot;#ffffff&quot;], [30, 40, &quot;#000000&quot;]])</code>，假设图片在(100, 200)的位置的颜色为#123456, 当左边(110, 220)的位置的颜色为#fffff 且(130, 240)的位置的颜色为#000000，则函数返回点(100, 200)。<br> 如果要指定找色区域，则在 options 中指定，例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> p <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span>
  img<span class="token punctuation">,</span>
  <span class="token string">&quot;#123456&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-detectscolor-image-color-x-y-threshold-4-algorithm-diff" tabindex="-1"><a class="header-anchor" href="#images-detectscolor-image-color-x-y-threshold-4-algorithm-diff" aria-hidden="true">#</a> images.detectsColor(image, color, x, y[, threshold = 4, algorithm = &quot;diff&quot;])</h2>`,49),Mn=o("<li><code>image</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要检测的颜色</li><li><code>x</code> {number} 要检测的位置横坐标</li><li><code>y</code> {number} 要检测的位置纵坐标</li><li><code>threshold</code> {number} 颜色相似度临界值，默认为 4。取值范围为 0~255。</li>",5),Nn=n("code",null,"algorithm",-1),zn=n("li",null,[n("code",null,"equal"),a(": 相等匹配，只有与给定颜色 color 完全相等时才匹配。")],-1),On=n("li",null,[n("code",null,"diff"),a(": 差值匹配。与给定颜色的 R、G、B 差的绝对值之和小于 threshold 时匹配。")],-1),Gn=n("li",null,[n("code",null,"rgb"),a(": rgb 欧拉距离相似度。与给定颜色 color 的 rgb 欧拉距离小于等于 threshold 时匹配。")],-1),Ln=n("code",null,"rgb+",-1),Fn={href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer"},Pn=n("li",null,[n("code",null,"hs"),a(": hs 欧拉距离匹配。hs 为 HSV 空间的色调值。")],-1),Vn=o(`<p>返回图片 image 在位置(x, y)处是否匹配到颜色 color。用于检测图片中某个位置是否是特定颜色。 一个判断微博客户端的某个微博是否被点赞过的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//找到点赞控件</span>
<span class="token keyword">var</span> like <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;ly_feed_like_icon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取该控件中点坐标</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//截图</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//判断在该坐标的颜色是否为橙红色</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">detectsColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#fed9a8&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//是的话则已经是点赞过的了，不做任何动作</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">//否则点击点赞按钮</span>
  like<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findimage-img-template-options" tabindex="-1"><a class="header-anchor" href="#images-findimage-img-template-options" aria-hidden="true">#</a> images.findImage(img, template[, options])</h2><ul><li><code>img</code> {Image} 大图片</li><li><code>template</code> {Image} 小图片（模板）</li><li><code>options</code> {Object} 选项包括： <ul><li><code>threshold</code> {number} 图片相似度。取值范围为 0~1 的浮点数。默认值为 0.9。</li><li><code>region</code> {Array} 找图区域。参见 findColor 函数关于 region 的说明。</li><li><code>level</code> {number} <strong>一般而言不必修改此参数</strong>。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level 参数表示金字塔的层次, level 越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。</li></ul></li><li><code>return</code> {<a href="#point">Point</a>}</li></ul><p>找图。在大图片 img 中查找小图片 template 的位置（模块匹配），找到时返回位置坐标(Point)，找不到时返回 null。 该函数也可以作为全局函数使用。 一个最简单的找图例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/大图.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> templ <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/小图.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> templ<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦:&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>稍微复杂点的区域找图例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wx <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/微信图标.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回桌面</span>
<span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//截图并找图</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findImage</span><span class="token punctuation">(</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wx<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;在桌面找到了微信图标啦: &quot;</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;在桌面没有找到微信图标&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findimageinregion-img-template-x-y-width-height-threshold" tabindex="-1"><a class="header-anchor" href="#images-findimageinregion-img-template-x-y-width-height-threshold" aria-hidden="true">#</a> images.findImageInRegion(img, template, [x, y, width, height, threshold])</h2><p>区域找图的简便方法。相当于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>images<span class="token punctuation">.</span><span class="token function">findImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">threshold</span><span class="token operator">:</span> threshold<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-findcircles-gray-options" tabindex="-1"><a class="header-anchor" href="#images-findcircles-gray-options" aria-hidden="true">#</a> images.findCircles(gray, [options])</h2><ul><li><p><code>gray</code> {Image} 灰度图片</p></li><li><p><code>options</code> {Object} 可选项包括：</p><ul><li><code>region</code> {Array} 找圆区域。是一个两个或四个元素的数组。(region[0], region[1])表示找圆区域的左上角；region[2]*region[3]表示找圆区域的宽高。如果只有 region 只有两个元素，则找圆区域为(region[0], region[1])到图片右下角。如果不指定<code>region</code>选项，则找圆区域为整张图片。</li><li><code>dp</code> {number} dp 是累加面与原始图像相比的分辨率的反比参数，dp=2 时累计面分辨率是元素图像的一半，宽高都缩减为原来的一半，dp=1 时，两者相同。默认为 1。</li><li><code>minDst</code> {number} minDist 定义了两个圆心之间的最小距离。默认为图片高度的八分之一。</li><li><code>param1</code> {number} param1 是 Canny 边缘检测的高阈值，低阈值被自动置为高阈值的一半。默认为 100，范围为 0-255。</li><li><code>param2</code> {number} param2 是累加平面对是否是圆的判定阈值，默认为 100。</li><li><code>minRadius</code> {number} 定义了检测到的圆的半径的最小值，默认为 0。</li><li><code>maxRadius</code> {number} 定义了检测到的圆的半径的最大值，0 为不限制最大值，默认为 0。</li></ul></li><li><p><code>return</code> {Array}</p></li></ul><p>在图片中寻找圆（做霍夫圆变换）。返回包含所有圆坐标{x,y,radius}的数组，找不到时返回 null。 一个寻找圆的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求截图</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截图</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 灰度化图片</span>
<span class="token keyword">let</span> gray <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">grayscale</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找圆</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">findCircles</span><span class="token punctuation">(</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 回收图片</span>
gray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-matchtemplate-img-template-options" tabindex="-1"><a class="header-anchor" href="#images-matchtemplate-img-template-options" aria-hidden="true">#</a> images.matchTemplate(img, template, [options])</h2>`,17),Un=o('<ul><li><code>img</code> {Image} 大图片</li><li><code>template</code> {Image} 小图片（模板）</li><li><code>options</code> {Object} 找图选项： <ul><li><code>threshold</code> {number} 图片相似度。取值范围为 0~1 的浮点数。默认值为 0.9。</li><li><code>region</code> {Array} 找图区域。参见 findColor 函数关于 region 的说明。</li><li><code>max</code> {number} 找图结果最大数量，默认为 5</li><li><code>level</code> {number} <strong>一般而言不必修改此参数</strong>。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level 参数表示金字塔的层次, level 越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。</li></ul></li><li><code>retrun</code> {MatchingResult}</li></ul><p>在大图片中搜索小图片，并返回搜索结果 MatchingResult。该函数可以用于找图时找出多个位置，可以通过 max 参数控制最大的结果数量。也可以对匹配结果进行排序、求最值等操作。</p><h1 id="matchingresult" tabindex="-1"><a class="header-anchor" href="#matchingresult" aria-hidden="true">#</a> MatchingResult</h1>',3),Yn=o(`<h2 id="matchingresult-matches" tabindex="-1"><a class="header-anchor" href="#matchingresult-matches" aria-hidden="true">#</a> MatchingResult.matches</h2><ul><li>{Array} 匹配结果的数组,数组的元素是一个 Match 对象： <ul><li><code>point</code> {Point} 匹配位置</li><li><code>similarity</code> {number} 相似度</li></ul></li></ul><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">matchTemplate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>matches<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;point = &quot;</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>point <span class="token operator">+</span> <span class="token string">&quot;, similarity = &quot;</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>similarity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="matchingresult-points" tabindex="-1"><a class="header-anchor" href="#matchingresult-points" aria-hidden="true">#</a> MatchingResult.points</h2><ul><li><code>retrun</code> {Array} 匹配位置的数组。</li></ul><h2 id="matchingresult-first" tabindex="-1"><a class="header-anchor" href="#matchingresult-first" aria-hidden="true">#</a> MatchingResult.first()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>第一个匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-last" tabindex="-1"><a class="header-anchor" href="#matchingresult-last" aria-hidden="true">#</a> MatchingResult.last()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>最后一个匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-leftmost" tabindex="-1"><a class="header-anchor" href="#matchingresult-leftmost" aria-hidden="true">#</a> MatchingResult.leftmost()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>位于大图片最左边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-topmost" tabindex="-1"><a class="header-anchor" href="#matchingresult-topmost" aria-hidden="true">#</a> MatchingResult.topmost()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>位于大图片最上边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-rightmost" tabindex="-1"><a class="header-anchor" href="#matchingresult-rightmost" aria-hidden="true">#</a> MatchingResult.rightmost()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>位于大图片最右边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-bottommost" tabindex="-1"><a class="header-anchor" href="#matchingresult-bottommost" aria-hidden="true">#</a> MatchingResult.bottommost()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>位于大图片最下边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-best" tabindex="-1"><a class="header-anchor" href="#matchingresult-best" aria-hidden="true">#</a> MatchingResult.best()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>相似度最高的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-worst" tabindex="-1"><a class="header-anchor" href="#matchingresult-worst" aria-hidden="true">#</a> MatchingResult.worst()</h2><ul><li><code>retrun</code> {Match}</li></ul><p>相似度最低的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h2 id="matchingresult-sortby-cmp" tabindex="-1"><a class="header-anchor" href="#matchingresult-sortby-cmp" aria-hidden="true">#</a> MatchingResult.sortBy(cmp)</h2><ul><li><code>cmp</code> {Function} | {string} 比较函数，或者是一个字符串表示排序方向。方向值为： <ul><li><code>left</code> 从左往右</li><li><code>right</code> 从右往左</li><li><code>top</code> 从上往下</li><li><code>bottom</code> 从下往上</li></ul></li><li><code>return</code> {MatchingResult}</li></ul><p>对匹配结果进行排序，并返回排序后的结果。 例如&quot;left&quot;表示将匹配结果按匹配位置从左往右排序、&quot;top&quot;表示将匹配结果按匹配位置从上往下排序，&quot;left-top&quot;表示将匹配结果按匹配位置从左往右、从上往下排序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">matchTemplate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string">&quot;top-right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> Image</h1><p>表示一张图片，可以是截图的图片，或者本地读取的图片，或者从网络获取的图片。</p><h2 id="image-recycle" tabindex="-1"><a class="header-anchor" href="#image-recycle" aria-hidden="true">#</a> Image.recycle()</h2><p>释放图片</p><h2 id="image-getwidth" tabindex="-1"><a class="header-anchor" href="#image-getwidth" aria-hidden="true">#</a> Image.getWidth()</h2><p>返回以像素为单位图片宽度。</p><h2 id="image-getheight" tabindex="-1"><a class="header-anchor" href="#image-getheight" aria-hidden="true">#</a> Image.getHeight()</h2><p>返回以像素为单位的图片高度。</p><h2 id="image-saveto-path" tabindex="-1"><a class="header-anchor" href="#image-saveto-path" aria-hidden="true">#</a> Image.saveTo(path)</h2><ul><li><code>path</code> {string} 绝对路径</li></ul><p>把图片保存到路径 path。（如果文件存在则覆盖）</p><h2 id="image-pixel-x-y" tabindex="-1"><a class="header-anchor" href="#image-pixel-x-y" aria-hidden="true">#</a> Image.pixel(x, y)</h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li></ul><p>返回图片 image 在点(x, y)处的像素的 ARGB 值。 该值的格式为 0xAARRGGBB，是一个&quot;32 位整数&quot;(虽然 JavaScript 中并不区分整数类型和其他数值类型)。<br> 坐标系以图片左上角为原点。以图片左侧边为 y 轴，上侧边为 x 轴。</p><h1 id="point" tabindex="-1"><a class="header-anchor" href="#point" aria-hidden="true">#</a> Point</h1><p>findColor, findImage 返回的对象。表示一个点（坐标）。</p><h2 id="point-x" tabindex="-1"><a class="header-anchor" href="#point-x" aria-hidden="true">#</a> Point.x</h2><p>横坐标。</p><h2 id="point-y" tabindex="-1"><a class="header-anchor" href="#point-y" aria-hidden="true">#</a> Point.y</h2><p>纵坐标。</p>`,54);function Dn(Hn,Qn){const t=i("Badge"),e=i("ExternalLinkIcon");return p(),l("div",null,[r,s(t,{type:"tip",text:"稳定",vertical:"middle"}),d,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),n("ul",null,[m,g,n("li",null,[k,a(' {string} 插值方法，可选，默认为"LINEAR"（线性插值），可选的值有： '),n("ul",null,[h,v,b,f,n("li",null,[_,a(" Lanczos 插值 参见"),n("a",y,[a("InterpolationFlags"),s(e)])])])]),x]),q,n("p",null,[a("参见"),n("a",I,[a("Imgproc.resize"),s(e)]),a("。")]),w,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),n("ul",null,[R,j,C,n("li",null,[A,a(' {string} 插值方法，可选，默认为"LINEAR"（线性插值），可选的值有： '),n("ul",null,[B,E,S,T,n("li",null,[M,a(" Lanczos 插值 参见"),n("a",N,[a("InterpolationFlags"),s(e)])])])]),z]),n("p",null,[a("放缩图片，并返回放缩后的图片。例如把图片变成原来的一半："),O,a("。 参见"),n("a",G,[a("Imgproc.resize"),s(e)]),a("。")]),L,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),F,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),P,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),V,U,Y,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),n("ul",null,[D,H,Q,n("li",null,[Z,a(' {string} 阈值化类型，默认为"BINARY"，参见'),n("a",X,[a("ThresholdTypes"),s(e)]),a(", 可选的值: "),J]),W]),n("p",null,[a("将图片阈值化，并返回处理后的图像。可以用这个函数进行图片二值化。例如："),K,a("，这个代码将图片中大于 100 的值全部变成 255，其余变成 0，从而达到二值化的效果。如果 img 是一张灰度化图片，这个代码将会得到一张黑白图片。 可以参考有关博客（比如"),n("a",$,[a("threshold 函数的使用"),s(e)]),a("）或者 OpenCV 文档"),n("a",nn,[a("threshold"),s(e)]),a("。")]),an,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),sn,n("p",null,[a("对图片进行自适应阈值化处理，并返回处理后的图像。 可以参考有关博客（比如"),n("a",en,[a("threshold 与 adaptiveThreshold"),s(e)]),a("）或者 OpenCV 文档"),n("a",tn,[a("adaptiveThreshold"),s(e)]),a("。")]),on,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),n("ul",null,[cn,n("li",null,[pn,a(" {string} 颜色空间转换的类型，可选的值有一共有 205 个（参见"),n("a",ln,[a("ColorConversionCodes"),s(e)]),a("），这里只列出几个： "),un]),rn,dn]),n("p",null,[a("对图像进行颜色空间转换，并返回转换后的图像。 可以参考有关博客（比如"),n("a",mn,[a("颜色空间转换"),s(e)]),a("）或者 OpenCV 文档"),n("a",gn,[a("cvtColor"),s(e)]),a("。")]),kn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),hn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),vn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),bn,n("p",null,[a("对图像进行模糊（平滑处理），返回处理后的图像。"),fn,a(" 可以参考有关博客（比如"),n("a",_n,[a("实现图像平滑处理"),s(e)]),a("）或者 OpenCV 文档"),n("a",yn,[a("blur"),s(e)]),a("。")]),xn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),qn,n("p",null,[a("对图像进行中值滤波，返回处理后的图像。"),In,a(" 可以参考有关博客（比如"),n("a",wn,[a("实现图像平滑处理"),s(e)]),a("）或者 OpenCV 文档"),n("a",Rn,[a("medianBlur"),s(e)]),a("。")]),jn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),Cn,n("p",null,[a("对图像进行高斯模糊，返回处理后的图像。"),An,a(" 可以参考有关博客（比如"),n("a",Bn,[a("实现图像平滑处理"),s(e)]),a("）或者 OpenCV 文档"),n("a",En,[a("GaussianBlur"),s(e)]),a("。")]),Sn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),Tn,n("ul",null,[Mn,n("li",null,[Nn,a(" {string} 颜色匹配算法，包括: "),n("ul",null,[zn,On,Gn,n("li",null,[Ln,a(": 加权 rgb 欧拉距离匹配("),n("a",Fn,[a("LAB Delta E"),s(e)]),a(")。")]),Pn])])]),Vn,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),Un,s(t,{type:"tip",text:"v4.1.0+",vertical:"middle"}),Yn])}const Xn=c(u,[["render",Dn],["__file","images.html.vue"]]);export{Xn as default};
