import{_ as c,M as o,p as u,q as l,N as a,R as n,t as s,a1 as p}from"./framework-c8e009f3.js";const i={},r=n("h1",{id:"网络请求-http",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网络请求-http","aria-hidden":"true"},"#"),s(" 网络请求-http")],-1),d=p(`<p>http 模块提供一些进行 http 请求的函数。</p><h2 id="http-get-url-options-callback" tabindex="-1"><a class="header-anchor" href="#http-get-url-options-callback" aria-hidden="true">#</a> http.get(url[, options, callback])</h2><ul><li><code>url</code> {string} 请求的 URL 地址，需要以&quot;http://&quot;或&quot;https://&quot;开头。如果 url 没有以&quot;http://&quot;开头，则默认为&quot;http://&quot;。</li><li><code>options</code> {Object} 请求选项。参见<a href="#httprequesturl-options-callback">http.request()</a>。</li><li><code>callback</code> {Function} 回调函数，可选，其参数是一个<a href="#response">Response</a>对象。如果不加回调函数，则该请求将阻塞、同步地执行。</li></ul><p>对地址 url 进行一次 HTTP GET 请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应,(参见<a href="#response">Response</a>)。</p><p>最简单 GET 请求如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;code = &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html = &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用回调形式的 GET 请求如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;code = &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html = &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要增加 HTTP 头部信息，则在 options 参数中添加，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Accept-Language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zh-cn,zh;q=0.5&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;User-Agent&quot;</span><span class="token operator">:</span>
      <span class="token string">&quot;Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;code = &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html = &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个请求天气并解析返回的天气 JSON 结果的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token string">&quot;广州&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;http://www.sojson.com/open/api/weather/json.shtml?city=&quot;</span> <span class="token operator">+</span> city
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;请求失败: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>statusMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> weather <span class="token operator">=</span> res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">log</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">toast</span><span class="token punctuation">(</span>
    util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
      <span class="token string">&quot;温度: %s 湿度: %s 空气质量: %s&quot;</span><span class="token punctuation">,</span>
      weather<span class="token punctuation">.</span>data<span class="token punctuation">.</span>wendu<span class="token punctuation">,</span>
      weather<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shidu<span class="token punctuation">,</span>
      weather<span class="token punctuation">.</span>quality
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-post-url-data-options-callback" tabindex="-1"><a class="header-anchor" href="#http-post-url-data-options-callback" aria-hidden="true">#</a> http.post(url, data[, options, callback])</h2><ul><li><code>url</code> {string} 请求的 URL 地址，需要以&quot;http://&quot;或&quot;https://&quot;开头。如果 url 没有以&quot;http://&quot;开头，则默认为&quot;http://&quot;。</li><li><code>data</code> {string} | {Object} POST 数据。</li><li><code>options</code> {Object} 请求选项。</li><li><code>callback</code> {Function} 回调，其参数是一个<a href="#response">Response</a>对象。如果不加回调参数，则该请求将阻塞、同步地执行。</li></ul><p>对地址 url 进行一次 HTTP POST 请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见<a href="#response">Response</a>)。</p><p>其中 POST 数据可以是字符串或键值对。具体含义取决于 options.contentType 的值。默认为&quot;application/x-www-form-urlencoded&quot;(表单提交), 这种方式是 JQuery 的 ajax 函数的默认方式。</p><p>一个模拟表单提交登录淘宝的例子如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;https://login.taobao.com/member/login.jhtml&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">&quot;你的用户名&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token string">&quot;你的密码&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">TPL_username</span><span class="token operator">:</span> username<span class="token punctuation">,</span>
  <span class="token literal-property property">TPL_password</span><span class="token operator">:</span> password<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> html <span class="token operator">=</span> res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;页面跳转中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;登录失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-postjson-url-data-options-callback" tabindex="-1"><a class="header-anchor" href="#http-postjson-url-data-options-callback" aria-hidden="true">#</a> http.postJson(url[, data, options, callback])</h2><ul><li><code>url</code> {string} 请求的 URL 地址，需要以&quot;http://&quot;或&quot;https://&quot;开头。如果 url 没有以&quot;http://&quot;开头，则默认为&quot;http://&quot;。</li><li><code>data</code> {Object} POST 数据。</li><li><code>options</code> {Object} 请求选项。</li><li><code>callback</code> {Function} 回调，其参数是一个<a href="#response">Response</a>对象。如果不加回调参数，则该请求将阻塞、同步地执行。</li></ul><p>以 JSON 格式向目标 Url 发起 POST 请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见<a href="#response">Response</a>)。</p><p>JSON 格式指的是，将会调用<code>JSON.stringify()</code>把 data 对象转换为 JSON 字符串，并在 HTTP 头部信息中把&quot;Content-Type&quot;属性置为&quot;application/json&quot;。这种方式是 AngularJS 的 ajax 函数的默认方式。</p><p>一个调用图灵机器人接口的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;http://www.tuling123.com/openapi/api&quot;</span><span class="token punctuation">;</span>
r <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postJson</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;65458a5df537443b89b31f1c03202a80&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&quot;你好啊&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">userid</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-postmultipart-url-files-options-callback" tabindex="-1"><a class="header-anchor" href="#http-postmultipart-url-files-options-callback" aria-hidden="true">#</a> http.postMultipart(url, files[, options, callback])</h2><ul><li><code>url</code> {string} 请求的 URL 地址，需要以&quot;http://&quot;或&quot;https://&quot;开头。如果 url 没有以&quot;http://&quot;开头，则默认为&quot;http://&quot;。</li><li><code>files</code> {Object} POST 数据。</li><li><code>options</code> {Object} 请求选项。</li><li><code>callback</code> {Function} 回调，其参数是一个<code>Response</code>对象。如果不加回调参数，则该请求将阻塞、同步地执行。</li></ul><p>向目标地址发起类型为 multipart/form-data 的请求(通常用于文件上传等), 其中 files 参数是{name1: value1, name2: value2, ...}的键值对，value 的格式可以是以下几种情况：</p><ol><li><code>string</code></li><li>文件类型，即 open()返回的类型</li><li>[fileName, filePath]</li><li>[fileName, mimeType, filePath]</li></ol><p>其中 1 属于非文件参数，2、3、4 为文件参数。举个例子，最简单的文件上传的请求为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用格式 2，则代码为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用格式 3，则代码为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用格式 2 的同时要附带非文件参数&quot;appId=abcdefghijk&quot;，则为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">appId</span><span class="token operator">:</span> <span class="token string">&quot;adcdefghijk&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-request-url-options-callback" tabindex="-1"><a class="header-anchor" href="#http-request-url-options-callback" aria-hidden="true">#</a> http.request(url[, options, callback])</h2><ul><li><code>url</code> {string} 请求的 URL 地址，需要以&quot;http://&quot;或&quot;https://&quot;开头。如果 url 没有以&quot;http://&quot;开头，则默认为&quot;http://&quot;。</li><li><code>options</code> {Object} 请求选项。</li><li><code>callback</code> {Function} 回调，其参数是一个<a href="#response">Response</a>对象。如果不加回调参数，则该请求将阻塞、同步地执行。</li></ul><p>对目标地址 url 发起一次 HTTP 请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见<a href="#response">Response</a>)。</p><p>选项 options 可以包含以下属性：</p>`,40),k=n("code",null,"headers",-1),v={href:"http://www.runoob.com/http/http-header-fields.html",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,[n("code",null,"method"),s(' {string} HTTP 请求方法。包括"GET", "POST", "PUT", "DELET", "PATCH"。')],-1),b=n("code",null,"contentType",-1),m={href:"http://www.runoob.com/http/http-content-type.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"body",-1),q={href:"https://github.com/square/okio/blob/master/okio/src/main/java/okio/BufferedSink.java",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"该函数是 get, post, postJson 等函数的基础函数。因此除非是 PUT, DELET 等请求，或者需要更高定制的 HTTP 请求，否则直接使用 get, post, postJson 等函数会更加方便。",-1),y=n("h1",{id:"response",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#response","aria-hidden":"true"},"#"),s(" Response")],-1),w=n("p",null,"HTTP 请求的响应。",-1),T=n("h2",{id:"response-statuscode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#response-statuscode","aria-hidden":"true"},"#"),s(" Response.statusCode")],-1),_=n("ul",null,[n("li",null,[n("code",null,"retrun"),s(" {number}")])],-1),j=n("p",null,"当前响应的 HTTP 状态码。例如 200(OK), 404(Not Found)等。",-1),x={href:"http://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"response-statusmessage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#response-statusmessage","aria-hidden":"true"},"#"),s(" Response.statusMessage")],-1),O=n("ul",null,[n("li",null,[n("code",null,"retrun"),s(" {string}")])],-1),H=n("p",null,'当前响应的 HTTP 状态信息。例如"OK", "Bad Request", "Forbidden"。',-1),R={href:"http://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;页面获取成功!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;页面没找到哦...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;错误: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>statusMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="response-headers" tabindex="-1"><a class="header-anchor" href="#response-headers" aria-hidden="true">#</a> Response.headers</h2><ul><li><code>retrun</code> {Object}</li></ul><p>当前响应的 HTTP 头部信息。该对象的键是响应头名称，值是各自的响应头值。 所有响应头名称都是小写的(吗)。</p>`,5),N={href:"http://www.runoob.com/http/http-header-fields.html",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>例子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP Headers:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> headerName <span class="token keyword">in</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %s&quot;</span><span class="token punctuation">,</span> headerName<span class="token punctuation">,</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>headerName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="response-body" tabindex="-1"><a class="header-anchor" href="#response-body" aria-hidden="true">#</a> Response.body</h2><ul><li><code>retrun</code> {Object}</li></ul><p>当前响应的内容。他有以下属性和函数：</p><ul><li>bytes() {Array} 以字节数组形式返回响应内容</li><li>string() {string} 以字符串形式返回响应内容</li><li>json() {Object} 把响应内容作为 JSON 格式的数据并调用 JSON.parse，返回解析后的对象</li><li>contentType {string} 当前响应的内容类型</li></ul><p><strong>注意，string 和 json 二选一，不能同时使用</strong></p><h2 id="response-request" tabindex="-1"><a class="header-anchor" href="#response-request" aria-hidden="true">#</a> Response.request</h2><ul><li><code>retrun</code> {Request}</li></ul><p>当前响应所对应的请求。参见[Request][]。</p><h2 id="response-url" tabindex="-1"><a class="header-anchor" href="#response-url" aria-hidden="true">#</a> Response.url</h2><ul><li><code>retrun</code> {number}</li></ul><p>当前响应所对应的请求 URL。</p><h2 id="response-method" tabindex="-1"><a class="header-anchor" href="#response-method" aria-hidden="true">#</a> Response.method</h2><ul><li><code>retrun</code> {string}</li></ul><p>当前响应所对应的 HTTP 请求的方法。例如&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;等。</p>`,16);function L(J,M){const e=o("Badge"),t=o("ExternalLinkIcon");return u(),l("div",null,[r,a(e,{type:"tip",text:"稳定",vertical:"middle"}),d,n("ul",null,[n("li",null,[k,s(" {Object} 键值对形式的 HTTP 头部信息。有关 HTTP 头部信息，参见"),n("a",v,[s("菜鸟教程：HTTP 响应头信息"),a(t)]),s("。")]),h,n("li",null,[b,s(' {string} HTTP 头部信息中的"Content-Type", 表示 HTTP 请求的内容类型。例如"text/plain", "application/json"。更多信息参见'),n("a",m,[s("菜鸟教程：HTTP contentType"),a(t)]),s("。")]),n("li",null,[g,s(" {string} | {Array} | {Function} HTTP 请求的内容。可以是一个字符串，也可以是一个字节数组；或者是一个以"),n("a",q,[s("BufferedSink"),a(t)]),s("为参数的函数。")])]),f,y,w,T,_,j,n("p",null,[s("有关 HTTP 状态码的信息，参见"),n("a",x,[s("菜鸟教程：HTTP 状态码"),a(t)]),s("。")]),P,O,H,n("p",null,[s("有关 HTTP 状态码的信息，参见"),n("a",R,[s("菜鸟教程：HTTP 状态码"),a(t)]),s("。")]),S,n("p",null,[s("有关 HTTP 头部信息，参见"),n("a",N,[s("菜鸟教程：HTTP 响应头信息"),a(t)]),s("。")]),C])}const U=c(i,[["render",L],["__file","http.html.vue"]]);export{U as default};
