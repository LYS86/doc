import{_ as i,M as o,p,q as l,N as s,R as a,t as n,a1 as e}from"./framework-c8e009f3.js";const u={},d=a("h1",{id:"基于控件的操作",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基于控件的操作","aria-hidden":"true"},"#"),n(" 基于控件的操作")],-1),r=e(`<p>基于控件的操作指的是选择屏幕上的控件，获取其信息或对其进行操作。对于一般软件而言，基于控件的操作对不同机型有很好的兼容性；但是对于游戏而言，由于游戏界面并不是由控件构成，无法采用本章节的方法，也无法使用本章节的函数。有关游戏脚本的编写，请参考《基于坐标的操作》。</p><p>基于控件的操作依赖于无障碍服务，因此最好在脚本开头使用<code>auto()</code>函数来确保无障碍服务已经启用。如果运行到某个需要权限的语句无障碍服务并没启动，则会抛出异常并跳转到无障碍服务界面。这样的用户体验并不好，因为需要重新运行脚本，后续会加入等待无障碍服务启动并让脚本继续运行的函数。</p><p>您也可以在脚本开头使用<code>&quot;auto&quot;;</code>表示这个脚本需要无障碍服务，但是不推荐这种做法，因为这个标记必须在脚本的最开头(前面不能有注释或其他语句、空格等)，我们推荐使用<code>auto()</code>函数来确保无障碍服务已启用。</p><h2 id="auto-mode" tabindex="-1"><a class="header-anchor" href="#auto-mode" aria-hidden="true">#</a> auto([mode])</h2><ul><li><code>mode</code> {string} 模式</li></ul><p>检查无障碍服务是否已经启用，如果没有启用则抛出异常并跳转到无障碍服务启用界面；同时设置无障碍模式为 mode。mode 的可选值为：</p><ul><li><code>fast</code> 快速模式。该模式下会启用控件缓存，从而选择器获取屏幕控件更快。对于需要快速的控件操作的脚本可以使用该模式，一般脚本则没有必要使用该函数。</li><li><code>normal</code> 正常模式，默认。</li></ul><p>如果不加 mode 参数，则为正常模式。</p><p>建议使用<code>auto.waitFor()</code>和<code>auto.setMode()</code>代替该函数，因为<code>auto()</code>函数如果无障碍服务未启动会停止脚本；而<code>auto.waitFor()</code>则会在在无障碍服务启动后继续运行。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token string">&quot;fast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="auto-waitfor" tabindex="-1"><a class="header-anchor" href="#auto-waitfor" aria-hidden="true">#</a> auto.waitFor()</h2><p>检查无障碍服务是否已经启用，如果没有启用则跳转到无障碍服务启用界面，并等待无障碍服务启动后脚本会继续运行。</p><h2 id="auto-setmode-mode" tabindex="-1"><a class="header-anchor" href="#auto-setmode-mode" aria-hidden="true">#</a> auto.setMode(mode)</h2><ul><li><code>mode</code> {string} 模式</li></ul><p>设置无障碍模式为 mode。mode 的可选值为：</p><ul><li><code>fast</code> 快速模式。该模式下会启用控件缓存，从而选择器获取屏幕控件更快。对于需要快速的控件查看和操作的脚本可以使用该模式，一般脚本则没有必要使用该函数。</li><li><code>normal</code> 正常模式，默认。</li></ul><h1 id="simpleactionautomator" tabindex="-1"><a class="header-anchor" href="#simpleactionautomator" aria-hidden="true">#</a> SimpleActionAutomator</h1><blockquote><p>稳定性: 稳定</p></blockquote><p>SimpleActionAutomator 提供了一些模拟简单操作的函数，例如点击文字、模拟按键等。这些函数可以直接作为全局函数使用。</p><h2 id="click-text-i" tabindex="-1"><a class="header-anchor" href="#click-text-i" aria-hidden="true">#</a> click(text[, i])</h2><ul><li><code>text</code> {string} 要点击的文本</li><li><code>i</code> {number} 如果相同的文本在屏幕中出现多次，则 i 表示要点击第几个文本, i 从 0 开始计算</li></ul><p>返回是否点击成功。当屏幕中并未包含该文本，或者该文本所在区域不能点击时返回 false，否则返回 true。</p><p>该函数可以点击大部分包含文字的按钮。例如微信主界面下方的&quot;微信&quot;, &quot;联系人&quot;, &quot;发现&quot;, &quot;我&quot;的按钮。<br> 通常与 while 同时使用以便点击按钮直至成功。例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;扫一扫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当不指定参数 i 时则会尝试点击屏幕上出现的所有文字 text 并返回是否全部点击成功。</p><p>i 是从 0 开始计算的, 也就是, <code>click(&quot;啦啦啦&quot;, 0)</code>表示点击屏幕上第一个&quot;啦啦啦&quot;, <code>click(&quot;啦啦啦&quot;, 1)</code>表示点击屏幕上第二个&quot;啦啦啦&quot;。</p><blockquote><p>文本所在区域指的是，从文本处向其父视图寻找，直至发现一个可点击的部件为止。</p></blockquote><h2 id="click-left-top-bottom-right" tabindex="-1"><a class="header-anchor" href="#click-left-top-bottom-right" aria-hidden="true">#</a> click(left, top, bottom, right)</h2><ul><li><code>left</code> {number} 要点击的长方形区域左边与屏幕左边的像素距离</li><li><code>top</code> {number} 要点击的长方形区域上边与屏幕上边的像素距离</li><li><code>bottom</code> {number} 要点击的长方形区域下边与屏幕下边的像素距离</li><li><code>right</code> {number} 要点击的长方形区域右边与屏幕右边的像素距离</li></ul><p><strong>注意，该函数一般只用于录制的脚本中使用，在自己写的代码中尽量不要使用该函数。</strong></p><p>点击在指定区域的控件。当屏幕中并未包含与该区域严格匹配的区域，或者该区域不能点击时返回 false，否则返回 true。</p><p>有些按钮或者部件是图标而不是文字（例如发送朋友圈的照相机图标以及 QQ 下方的消息、联系人、动态图标），这时不能通过<code>click(text, i)</code>来点击，可以通过描述图标所在的区域来点击。left, bottom, top, right 描述的就是点击的区域。</p><p>至于要定位点击的区域，可以在悬浮窗使用布局分析工具查看控件的 bounds 属性。</p><p>通过无障碍服务录制脚本会生成该语句。</p><h2 id="longclick-text-i" tabindex="-1"><a class="header-anchor" href="#longclick-text-i" aria-hidden="true">#</a> longClick(text[, i]))</h2><ul><li><code>text</code> {string} 要长按的文本</li><li><code>i</code> {number} 如果相同的文本在屏幕中出现多次，则 i 表示要长按第几个文本, i 从 0 开始计算</li></ul><p>返回是否点击成功。当屏幕中并未包含该文本，或者该文本所在区域不能点击时返回 false，否则返回 true。</p><p>当不指定参数 i 时则会尝试点击屏幕上出现的所有文字 text 并返回是否全部长按成功。</p><h2 id="scrollup-i" tabindex="-1"><a class="header-anchor" href="#scrollup-i" aria-hidden="true">#</a> scrollUp([i])</h2><ul><li><code>i</code> {number} 要滑动的控件序号</li></ul><p>找到第 i+1 个可滑动控件上滑或<strong>左滑</strong>。返回是否操作成功。屏幕上没有可滑动的控件时返回 false。</p><p>另外不加参数时<code>scrollUp()</code>会寻找面积最大的可滑动的控件上滑或左滑，例如微信消息列表等。</p><p>参数为一个整数 i 时会找到第 i + 1 个可滑动控件滑动。例如<code>scrollUp(0)</code>为滑动第一个可滑动控件。</p><h2 id="scrolldown-i" tabindex="-1"><a class="header-anchor" href="#scrolldown-i" aria-hidden="true">#</a> scrollDown([i])</h2><ul><li><code>i</code> {number} 要滑动的控件序号</li></ul><p>找到第 i+1 个可滑动控件下滑或<strong>右滑</strong>。返回是否操作成功。屏幕上没有可滑动的控件时返回 false。</p><p>另外不加参数时<code>scrollUp()</code>会寻找面积最大的可滑动的控件下滑或右滑。</p><p>参数为一个整数 i 时会找到第 i + 1 个可滑动控件滑动。例如<code>scrollUp(0)</code>为滑动第一个可滑动控件。</p><h2 id="settext-i-text" tabindex="-1"><a class="header-anchor" href="#settext-i-text" aria-hidden="true">#</a> setText([i, ]text)</h2><ul><li><code>i</code> {number} 表示要输入的为第 i + 1 个输入框</li><li><code>text</code> {string} 要输入的文本</li></ul><p>返回是否输入成功。当找不到对应的文本框时返回 false。</p><p>不加参数 i 则会把所有输入框的文本都置为 text。例如<code>setText(&quot;测试&quot;)</code>。</p><p>这里的输入文本的意思是，把输入框的文本置为 text，而不是在原来的文本上追加。</p><h2 id="input-i-text" tabindex="-1"><a class="header-anchor" href="#input-i-text" aria-hidden="true">#</a> input([i, ]text)</h2><ul><li><code>i</code> {number} 表示要输入的为第 i + 1 个输入框</li><li><code>text</code> {string} 要输入的文本</li></ul><p>返回是否输入成功。当找不到对应的文本框时返回 false。</p><p>不加参数 i 则会把所有输入框的文本追加内容 text。例如<code>input(&quot;测试&quot;)</code>。</p><h1 id="uiselector" tabindex="-1"><a class="header-anchor" href="#uiselector" aria-hidden="true">#</a> UiSelector</h1><p>UiSelector 即选择器，用于通过各种条件选取屏幕上的控件，再对这些控件进行点击、长按等动作。这里需要先简单介绍一下控件和界面的相关知识。</p><p>一般软件的界面是由一个个控件构成的，例如图片部分是一个图片控件(ImageView)，文字部分是一个文字控件(TextView)；同时，通过各种布局来决定各个控件的位置，例如，线性布局(LinearLayout)里面的控件都是按水平或垂直一次叠放的，列表布局(AbsListView)则是以列表的形式显示控件。</p><p>控件有各种属性，包括文本(text), 描述(desc), 类名(className), id 等等。我们通常用一个控件的属性来找到这个控件，例如，想要点击 QQ 聊天窗口的&quot;发送&quot;按钮，我们就可以通过他的文本属性为&quot;发送&quot;来找到这个控件并点击他，具体代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sendButton <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sendButton<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中, <code>text(&quot;发送&quot;)</code>表示一个条件(文本属性为&quot;发送&quot;)，<code>findOne()</code>表示基于这个条件找到一个符合条件的控件，从而我们可以得到发送按钮 sendButton，再执行<code>sendButton.click()</code>即可点击&quot;发送&quot;按钮。</p><p>用文本属性来定位按钮控件、文本控件通常十分有效。但是，如果一个控件是图片控件，比如 Auto.js 主界面右上角的搜索图标，他没有文本属性，这时需要其他属性来定位他。我们如何查看他有什么属性呢？首先打开悬浮窗和无障碍服务，点击蓝色的图标(布局分析), 可以看到以下界面：</p><p>之后我们点击搜索图标，可以看到他有以下属性：</p><p>我们注意到这个图标的 desc(描述)属性为&quot;搜索&quot;，那么我们就可以通过 desc 属性来定位这个控件，得到点击搜索图标的代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;搜索&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能心细的你可能注意到了，这个控件还有很多其他的属性，例如 checked, className, clickable 等等，为什么不用这些属性来定位搜索图标呢？答案是，其他控件也有这些值相同的属性、尝试一下你就可以发现很多其他控件的 checked 属性和搜索控件一样都是<code>false</code>，如果我们用<code>checked(false)</code>作为条件，将会找到很多控件，而无法确定哪一个是搜索图标。因此，要找到我们想要的那个控件，<strong>选择器的条件通常需要是可唯一确定控件的</strong>。我们通常用一个独一无二的属性来定位一个控件，例如这个例子中就没有其他控件的 desc(描述)属性为&quot;搜索&quot;。</p><p>另外，对于这个搜索图标而言，id 属性也是唯一的，我们也可以用<code>id(&quot;action_search&quot;).findOne().click()</code>来点击这个控件。如果一个控件有 id 属性，那么这个属性很可能是唯一的，除了以下几种情况：</p><ul><li>QQ 的控件的 id 属性很多都是&quot;name&quot;，也就是在 QQ 界面难以通过 id 来定位一个控件</li><li>列表中的控件，比如 QQ 联系人列表，微信联系人列表等</li></ul><p>尽管 id 属性很方便，但也不总是最方便的，例如对于微信和网易云音乐，每次更新他的控件 id 都会变化，导致了相同代码对于不同版本的微信、网易云音乐并不兼容。</p><p>除了这些属性外，主要还有以下几种属性：</p><ul><li><code>className</code> 类名。类名表示一个控件的类型，例如文本控件为&quot;android.widget.TextView&quot;, 图片控件为&quot;android.widget.ImageView&quot;等。</li><li><code>packageName</code> 包名。包名表示控件所在的应用包名，例如 QQ 界面的控件的包名为&quot;com.tencent.mobileqq&quot;。</li><li><code>bounds</code> 控件在屏幕上的范围。</li><li><code>drawingOrder</code> 控件在父控件的绘制顺序。</li><li><code>indexInParent</code> 控件在父控件的位置。</li><li><code>clickable</code> 控件是否可点击。</li><li><code>longClickable</code> 控件是否可长按。</li><li><code>checkable</code> 控件是否可勾选。</li><li><code>checked</code> 控件是否可已勾选。</li><li><code>scrollable</code> 控件是否可滑动。</li><li><code>selected</code> 控件是否已选择。</li><li><code>editable</code> 控件是否可编辑。</li><li><code>visibleToUser</code> 控件是否可见。</li><li><code>enabled</code> 控件是否已启用。</li><li><code>depth</code> 控件的布局深度。</li></ul><p>有时候只靠一个属性并不能唯一确定一个控件，这时需要通过属性的组合来完成定位，例如<code>className(&quot;ImageView&quot;).depth(10).findOne().click()</code>，通过链式调用来组合条件。</p><p>通常用这些技巧便可以解决大部分问题，即使解决不了问题，也可以通过布局分析的&quot;生成代码&quot;功能来尝试生成一些选择器代码。接下来的问题便是对选取的控件进行操作，包括：</p><ul><li><code>click()</code> 点击。点击一个控件，前提是这个控件的 clickable 属性为 true</li><li><code>longClick()</code> 长按。长按一个控件，前提是这个控件的 longClickable 属性为 true</li><li><code>setText()</code> 设置文本，用于编辑框控件设置文本。</li><li><code>scrollForward()</code>, <code>scrollBackward()</code> 滑动。滑动一个控件(列表等), 前提是这个控件的 scrollable 属性为 true</li><li><code>exits()</code> 判断控件是否存在</li><li><code>waitFor()</code> 等待控件出现</li></ul><p>这些操作包含了绝大部分控件操作。根据这些我们可以很容易写出一个&quot;刷屏&quot;脚本(代码仅为示例，请不要在别人的群里测试，否则容易被踢):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;刷屏...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clicK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码也可以写成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;刷屏...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clicK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不加<code>findOne()</code>而直接进行操作，则选择器会找出<strong>所有</strong>符合条件的控件并操作。</p><p>另外一个比较常用的操作的滑动。滑动操作的第一步是找到需要滑动的控件，例如要滑动 QQ 消息列表则在悬浮窗布局层次分析中找到<code>AbsListView</code>，这个控件就是消息列表控件，如下图：</p><p>长按可查看控件信息，注意到其 scrollable 属性为 true，并找出其 id 为&quot;recent_chat_list&quot;，从而下滑 QQ 消息列表的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;recent_chat_list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>scrollForward()</code>为向前滑，包括下滑和右滑。</p><p>选择器的入门教程暂且到这里，更多信息可以查看下面的文档和选择器进阶。</p><h2 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> selector()</h2><ul><li><code>retrun</code> {UiSelector}</li></ul><p>创建一个新的选择器。但一般情况不需要使用该函数，因为可以直接用相应条件的语句创建选择器。</p><p>由于历史遗留原因，本不应该这样设计(不应该让<code>id()</code>, <code>text()</code>等作为全局函数，而是应该用<code>By.id()</code>, <code>By.text()</code>)，但为了后向兼容性只能保留这个设计。</p><p>这样的 API 设计会污染全局变量，后续可能会支持&quot;去掉这些全局函数而使用 By.***&quot;的选项。</p><h2 id="uiselector-text-str" tabindex="-1"><a class="header-anchor" href="#uiselector-text-str" aria-hidden="true">#</a> UiSelector.text(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li><code>retrun</code> {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;text 等于字符串 str&quot;的筛选条件。</p><p>控件的 text(文本)属性是文本控件上的显示的文字，例如微信左上角的&quot;微信&quot;文本。</p><h2 id="uiselector-textcontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-textcontains-str" aria-hidden="true">#</a> UiSelector.textContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;text 需要包含字符串 str&quot;的筛选条件。</p><p>这是一个比较有用的条件，例如 QQ 动态页和微博发现页上方的&quot;大家都在搜....&quot;的控件可以用<code>textContains(&quot;大家都在搜&quot;).findOne()</code>来获取。</p><h2 id="uiselector-textstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-textstartswith-prefix" aria-hidden="true">#</a> UiSelector.textStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;text 需要以 prefix 开头&quot;的筛选条件。</p><p>这也是一个比较有用的条件，例如要找出 Auto.js 脚本列表中名称以&quot;QQ&quot;开头的脚本的代码为<code>textStartsWith(&quot;QQ&quot;).find()</code>。</p><h2 id="uiselector-textendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-textendswith-suffix" aria-hidden="true">#</a> UiSelector.textEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;text 需要以 suffix 结束&quot;的筛选条件。</p><h2 id="uiselector-textmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-textmatches-reg" aria-hidden="true">#</a> UiSelector.textMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;text 需要满足正则表达式 reg&quot;的条件。</p>`,112),h={href:"https://www.runoob.com/jsref/jsref-obj-regexp.html",target:"_blank",rel:"noopener noreferrer"},k=e('<p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即 Java 正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><h2 id="uiselector-desc-str" tabindex="-1"><a class="header-anchor" href="#uiselector-desc-str" aria-hidden="true">#</a> UiSelector.desc(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li><code>retrun</code> {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;desc 等于字符串 str&quot;的筛选条件。</p><p>控件的 desc(描述，全称为 Content-Description)属性是对一个控件的描述，例如网易云音乐右上角的放大镜图标的描述为搜索。要查看一个控件的描述，同样地可以借助悬浮窗查看。</p><p>desc 属性同样是定位控件的利器。</p><h2 id="uiselector-desccontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-desccontains-str" aria-hidden="true">#</a> UiSelector.descContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;desc 需要包含字符串 str&quot;的筛选条件。</p><h2 id="uiselector-descstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-descstartswith-prefix" aria-hidden="true">#</a> UiSelector.descStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;desc 需要以 prefix 开头&quot;的筛选条件。</p><h2 id="uiselector-descendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-descendswith-suffix" aria-hidden="true">#</a> UiSelector.descEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;desc 需要以 suffix 结束&quot;的筛选条件。</p><h2 id="uiselector-descmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-descmatches-reg" aria-hidden="true">#</a> UiSelector.descMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;desc 需要满足正则表达式 reg&quot;的条件。</p>',18),b={href:"https://www.runoob.com/jsref/jsref-obj-regexp.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即 Java 正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><h2 id="uiselector-id-resid" tabindex="-1"><a class="header-anchor" href="#uiselector-id-resid" aria-hidden="true">#</a> UiSelector.id(resId)</h2><ul><li><code>resId</code> {string} 控件的 id，以&quot;包名:id/&quot;开头，例如&quot;com.tencent.mm:id/send_btn&quot;。<strong>也可以不指定包名</strong>，这时会以当前正在运行的应用的包名来补全 id。例如 id(&quot;send_btn&quot;),在 QQ 界面想当于 id(&quot;com.tencent.mobileqq:id/send_btn&quot;)。</li></ul><p>为当前选择器附加&quot;id 等于 resId&quot;的筛选条件。</p><p>控件的 id 属性通常是可以用来确定控件的唯一标识，如果一个控件有 id，那么使用 id 来找到他是最好的方法。要查看屏幕上的控件的 id，可以开启悬浮窗并使用界面工具，点击相应控件即可查看。若查看到的控件 id 为 null, 表示该控件没有 id。另外，在列表中会出现多个控件的 id 相同的情况。例如微信的联系人列表，每个头像的 id 都是一样的。此时不能用 id 来唯一确定控件。</p><p>在 QQ 界面经常会出现多个 id 为&quot;name&quot;的控件，在微信上则每个版本的 id 都会变化。对于这些软件而言比较难用 id 定位控件。</p><h2 id="uiselector-idcontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-idcontains-str" aria-hidden="true">#</a> UiSelector.idContains(str)</h2><ul><li><code>str</code> {string} id 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;id 包含字符串 str&quot;的筛选条件。比较少用。</p><h2 id="uiselector-idstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-idstartswith-prefix" aria-hidden="true">#</a> UiSelector.idStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} id 前缀</li></ul><p>为当前选择器附加&quot;id 需要以 prefix 开头&quot;的筛选条件。比较少用。</p><h2 id="uiselector-idendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-idendswith-suffix" aria-hidden="true">#</a> UiSelector.idEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} id 后缀</li></ul><p>为当前选择器附加&quot;id 需要以 suffix 结束&quot;的筛选条件。比较少用。</p><h2 id="uiselector-idmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-idmatches-reg" aria-hidden="true">#</a> UiSelector.idMatches(reg)</h2><ul><li><code>reg</code> {Regex} | {string} id 要满足的正则表达式</li></ul><p>附加 id 需要满足正则表达式。</p><p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即 Java 正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">idMatches</span><span class="token punctuation">(</span><span class="token string">&quot;[a-zA-Z]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uiselector-classname-str" tabindex="-1"><a class="header-anchor" href="#uiselector-classname-str" aria-hidden="true">#</a> UiSelector.className(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li><code>retrun</code> {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;className 等于字符串 str&quot;的筛选条件。</p><p>控件的 className(类名)表示一个控件的类别，例如文本控件的类名为 android.widget.TextView。</p><p>如果一个控件的类名以&quot;android.widget.&quot;开头，则可以省略这部分，例如文本控件可以直接用<code>className(&quot;TextView&quot;)</code>的选择器。</p><p>常见控件的类名如下：</p><ul><li><code>android.widget.TextView</code> 文本控件</li><li><code>android.widget.ImageView</code> 图片控件</li><li><code>android.widget.Button</code> 按钮控件</li><li><code>android.widget.EditText</code> 输入框控件</li><li><code>android.widget.AbsListView</code> 列表控件</li><li><code>android.widget.LinearLayout</code> 线性布局</li><li><code>android.widget.FrameLayout</code> 帧布局</li><li><code>android.widget.RelativeLayout</code> 相对布局</li><li><code>android.widget.RelativeLayout</code> 相对布局</li><li><code>android.support.v7.widget.RecyclerView</code> 通常也是列表控件</li></ul><h2 id="uiselector-classnamecontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamecontains-str" aria-hidden="true">#</a> UiSelector.classNameContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;className 需要包含字符串 str&quot;的筛选条件。</p><h2 id="uiselector-classnamestartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamestartswith-prefix" aria-hidden="true">#</a> UiSelector.classNameStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;className 需要以 prefix 开头&quot;的筛选条件。</p><h2 id="uiselector-classnameendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-classnameendswith-suffix" aria-hidden="true">#</a> UiSelector.classNameEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;className 需要以 suffix 结束&quot;的筛选条件。</p><h2 id="uiselector-classnamematches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamematches-reg" aria-hidden="true">#</a> UiSelector.classNameMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;className 需要满足正则表达式 reg&quot;的条件。</p>`,39),m={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},v=e('<p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即 Java 正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><h2 id="uiselector-packagename-str" tabindex="-1"><a class="header-anchor" href="#uiselector-packagename-str" aria-hidden="true">#</a> UiSelector.packageName(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li><code>retrun</code> {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;packageName 等于字符串 str&quot;的筛选条件。</p><p>控件的 packageName 表示控件所属界面的应用包名。例如微信的包名为&quot;com.tencent.mm&quot;, 那么微信界面的控件的 packageName 为&quot;com.tencent.mm&quot;。</p><p>要查看一个应用的包名，可以用函数<code>app.getPackageName()</code>获取，例如<code>toast(app.getPackageName(&quot;微信&quot;))</code>。</p><h2 id="uiselector-packagenamecontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamecontains-str" aria-hidden="true">#</a> UiSelector.packageNameContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;packageName 需要包含字符串 str&quot;的筛选条件。</p><h2 id="uiselector-packagenamestartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamestartswith-prefix" aria-hidden="true">#</a> UiSelector.packageNameStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;packageName 需要以 prefix 开头&quot;的筛选条件。</p><h2 id="uiselector-packagenameendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenameendswith-suffix" aria-hidden="true">#</a> UiSelector.packageNameEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;packageName 需要以 suffix 结束&quot;的筛选条件。</p><h2 id="uiselector-packagenamematches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamematches-reg" aria-hidden="true">#</a> UiSelector.packageNameMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;packageName 需要满足正则表达式 reg&quot;的条件。</p>',18),g={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<h2 id="uiselector-bounds-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-bounds-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.bounds(left, top, right, bottom)</h2><ul><li><code>left</code> {number} 控件左边缘与屏幕左边的距离</li><li><code>top</code> {number} 控件上边缘与屏幕上边的距离</li><li><code>right</code> {number} 控件右边缘与屏幕左边的距离</li><li><code>bottom</code> {number} 控件下边缘与屏幕上边的距离</li></ul><p>一个控件的 bounds 属性为这个控件在屏幕上显示的范围。我们可以用这个范围来定位这个控件。尽管用这个方法定位控件对于静态页面十分准确，却无法兼容不同分辨率的设备；同时对于列表页面等动态页面无法达到效果，因此使用不推荐该选择器。</p><p>注意参数的这四个数字不能随意填写，必须精确的填写控件的四个边界才能找到该控件。例如，要点击 QQ 主界面的右上角加号，我们用布局分析查看该控件的属性，如下图：</p><p>可以看到 bounds 属性为(951, 67, 1080, 196)，此时使用代码<code>bounds(951, 67, 1080, 196).clickable().click()</code>即可点击该控件。</p><h2 id="uiselector-boundsinside-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-boundsinside-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.boundsInside(left, top, right, bottom)</h2><ul><li><code>left</code> {number} 范围左边缘与屏幕左边的距离</li><li><code>top</code> {number} 范围上边缘与屏幕上边的距离</li><li><code>right</code> {number} 范围右边缘与屏幕左边的距离</li><li><code>bottom</code> {number} 范围下边缘与屏幕上边的距离</li></ul><p>为当前选择器附加控件&quot;bounds 需要在 left, top, right, bottom 构成的范围里面&quot;的条件。</p><p>这个条件用于限制选择器在某一个区域选择控件。例如要在屏幕上半部分寻找文本控件 TextView，代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">boundsInside</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>width<span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们使用了<code>device.width</code>来获取屏幕宽度，<code>device.height</code>来获取屏幕高度。</p><h2 id="uiselector-boundscontains-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-boundscontains-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.boundsContains(left, top, right, bottom)</h2><ul><li><code>left</code> {number} 范围左边缘与屏幕左边的距离</li><li><code>top</code> {number} 范围上边缘与屏幕上边的距离</li><li><code>right</code> {number} 范围右边缘与屏幕左边的距离</li><li><code>bottom</code> {number} 范围下边缘与屏幕上边的距离</li></ul><p>为当前选择器附加控件&quot;bounds 需要包含 left, top, right, bottom 构成的范围&quot;的条件。</p><p>这个条件用于限制控件的范围必须包含所给定的范围。例如给定一个点(500, 300), 寻找在这个点上的可点击控件的代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">boundsContains</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">500</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-drawingorder-order" tabindex="-1"><a class="header-anchor" href="#uiselector-drawingorder-order" aria-hidden="true">#</a> UiSelector.drawingOrder(order)</h2><ul><li><code>order</code> {number} 控件在父视图中的绘制顺序</li></ul><p>为当前选择器附加控件&quot;drawingOrder 等于 order&quot;的条件。</p><p>drawingOrder 为一个控件在父控件中的绘制顺序，通常可以用于区分同一层次的控件。</p><p>但该属性在 Android 7.0 以上才能使用。</p><h2 id="uiselector-clickable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-clickable-b-true" aria-hidden="true">#</a> UiSelector.clickable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可点击</li></ul><p>为当前选择器附加控件是否可点击的条件。但并非所有 clickable 为 false 的控件都真的不能点击，这取决于控件的实现。对于自定义控件(例如显示类名为 android.view.View 的控件)很多的 clickable 属性都为 false 都却能点击。</p><p>需要注意的是，可以省略参数<code>b</code>而表示选择那些可以点击的控件，例如<code>className(&quot;ImageView&quot;).clickable()</code>表示可以点击的图片控件的条件，<code>className(&quot;ImageView&quot;).clickable(false)</code>表示不可点击的图片控件的条件。</p><h2 id="uiselector-longclickable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-longclickable-b-true" aria-hidden="true">#</a> UiSelector.longClickable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可长按</li></ul><p>为当前选择器附加控件是否可长按的条件。</p><h2 id="uiselector-checkable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-checkable-b-true" aria-hidden="true">#</a> UiSelector.checkable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可勾选</li></ul><p>为当前选择器附加控件是否可勾选的条件。勾选通常是对于勾选框而言的，例如图片多选时左上角通常有一个勾选框。</p><h2 id="uiselector-selected-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-selected-b-true" aria-hidden="true">#</a> UiSelector.selected([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否被选</li></ul><p>为当前选择器附加控件是否已选中的条件。被选中指的是，例如 QQ 聊天界面点击下方的&quot;表情按钮&quot;时，会出现自己收藏的表情，这时&quot;表情按钮&quot;便处于选中状态，其 selected 属性为 true。</p><h2 id="uiselector-enabled-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-enabled-b-true" aria-hidden="true">#</a> UiSelector.enabled([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否已启用</li></ul><p>为当前选择器附加控件是否已启用的条件。大多数控件都是启用的状态(enabled 为 true)，处于“禁用”状态通常是灰色并且不可点击。</p><h2 id="uiselector-scrollable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-scrollable-b-true" aria-hidden="true">#</a> UiSelector.scrollable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可滑动</li></ul><p>为当前选择器附加控件是否可滑动的条件。滑动包括上下滑动和左右滑动。</p><p>可以用这个条件来寻找可滑动控件来滑动界面。例如滑动 Auto.js 的脚本列表的代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;android.support.v7.widget.RecyclerView&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">scrollable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//或者classNameEndsWith(&quot;RecyclerView&quot;).scrollable().findOne().scrollForward();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-editable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-editable-b-true" aria-hidden="true">#</a> UiSelector.editable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可编辑</li></ul><p>为当前选择器附加控件是否可编辑的条件。一般来说可编辑的控件为输入框(EditText)，但不是所有的输入框(EditText)都可编辑。</p><h2 id="uiselector-multiline-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-multiline-b-true" aria-hidden="true">#</a> UiSelector.multiLine([b = true])</h2><ul><li><code>b</code> {Boolean} 表示文本或输入框控件是否是多行显示的</li></ul><p>为当前选择器附加控件是否文本或输入框控件是否是多行显示的条件。</p><h2 id="uiselector-findone" tabindex="-1"><a class="header-anchor" href="#uiselector-findone" aria-hidden="true">#</a> UiSelector.findOne()</h2><ul><li><code>retrun</code> <a href="#uiobject">UiObject</a></li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件。如果找不到控件，当屏幕内容发生变化时会重新寻找，直至找到。</p><p>需要注意的是，如果屏幕上一直没有出现所描述的控件，则该函数会阻塞，直至所描述的控件出现为止。因此此函数不会返回<code>null</code>。</p><p>该函数本来应该命名为<code>untilFindOne()</code>，但由于历史遗留原因已经无法修改。如果想要只在屏幕上搜索一次而不是一直搜索，请使用<code>findOnce()</code>。</p><p>另外，如果屏幕上有多个满足条件的控件，<code>findOne()</code>采用深度优先搜索(DFS)，会返回该搜索算法找到的第一个控件。注意控件找到的顺序有时会起到作用。</p><h2 id="uiselector-findone-timeout" tabindex="-1"><a class="header-anchor" href="#uiselector-findone-timeout" aria-hidden="true">#</a> UiSelector.findOne(timeout)</h2><ul><li><code>timeout</code> {number} 搜索的超时时间，单位毫秒</li><li><code>retrun</code> <a href="#uiobject">UiObject</a></li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件；如果在 timeout 毫秒的时间内没有找到符合条件的控件，则终止搜索并返回<code>null</code>。</p><p>该函数类似于不加参数的<code>findOne()</code>，只不过加上了时间限制。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//启动Auto.js</span>
<span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在6秒内找出日志图标的控件</span>
<span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;action_log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果找到控件则点击</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  w<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">//否则提示没有找到</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没有找到日志图标&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-findonce" tabindex="-1"><a class="header-anchor" href="#uiselector-findonce" aria-hidden="true">#</a> UiSelector.findOnce()</h2><ul><li><code>retrun</code> <a href="#uiobject">UiObject</a></li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，如果找到符合条件的控件则返回该控件；否则返回<code>null</code>。</p><h2 id="uiselector-findonce-i" tabindex="-1"><a class="header-anchor" href="#uiselector-findonce-i" aria-hidden="true">#</a> UiSelector.findOnce(i)</h2><ul><li><code>i</code> {number} 索引</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，并返回第 i + 1 个符合条件的控件；如果没有找到符合条件的控件，或者符合条件的控件个数 &lt; i, 则返回<code>null</code>。</p><p>注意这里的控件次序，是搜索算法深度优先搜索(DSF)决定的。</p><h2 id="uiselector-find" tabindex="-1"><a class="header-anchor" href="#uiselector-find" aria-hidden="true">#</a> UiSelector.find()</h2><ul><li><code>retrun</code> <a href="#uicollection">UiCollection</a></li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，找到所有满足条件的控件集合并返回。这个搜索只进行一次，并不保证一定会找到，因而会出现返回的控件集合为空的情况。</p><p>不同于<code>findOne()</code>或者<code>findOnce()</code>只找到一个控件并返回一个控件，<code>find()</code>函数会找出所有满足条件的控件并返回一个控件集合。之后可以对控件集合进行操作。</p><p>可以通过 empty()函数判断找到的是否为空。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toastLog</span><span class="token punctuation">(</span><span class="token string">&quot;没找到╭(╯^╰)╮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toastLog</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-untilfind" tabindex="-1"><a class="header-anchor" href="#uiselector-untilfind" aria-hidden="true">#</a> UiSelector.untilFind()</h2><ul><li><code>retrun</code> <a href="#uicollection">UiCollection</a></li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到找到至少一个满足条件的控件为止，并返回所有满足条件的控件集合。</p><p>该函数与<code>find()</code>函数的区别在于，该函数永远不会返回空集合；但是，如果屏幕上一直没有出现满足条件的控件，则该函数会保持阻塞。</p><h2 id="uiselector-exists" tabindex="-1"><a class="header-anchor" href="#uiselector-exists" aria-hidden="true">#</a> UiSelector.exists()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>判断屏幕上是否存在控件符合选择器所确定的条件。例如要判断某个文本出现就执行某个动作，可以用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;某个文本&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//要支持的动作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-waitfor" tabindex="-1"><a class="header-anchor" href="#uiselector-waitfor" aria-hidden="true">#</a> UiSelector.waitFor()</h2><p>等待屏幕上出现符合条件的控件；在满足该条件的控件出现之前，该函数会一直保持阻塞。</p><p>例如要等待包含&quot;哈哈哈&quot;的文本控件出现的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">textContains</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈哈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uiselector-filter-f" tabindex="-1"><a class="header-anchor" href="#uiselector-filter-f" aria-hidden="true">#</a> UiSelector.filter(f)</h2><ul><li><code>f</code> {Function} 过滤函数，参数为 UiObject，返回值为 boolean</li></ul><p>为当前选择器附加自定义的过滤条件。</p><p>例如，要找出屏幕上所有文本长度为 10 的文本控件的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> uc <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> w<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="uiobject" tabindex="-1"><a class="header-anchor" href="#uiobject" aria-hidden="true">#</a> UiObject</h1><p>UiObject 表示一个控件，可以通过这个对象获取到控件的属性，也可以对控件进行点击、长按等操作。</p><p>获取一个 UiObject 通常通过选择器的<code>findOne()</code>, <code>findOnce()</code>等函数，也可以通过 UiCollection 来获取，或者通过<code>UiObject.child()</code>, <code>UiObject.parent()</code>等函数来获取一个控件的子控件或父控件。</p><h2 id="uiobject-click" tabindex="-1"><a class="header-anchor" href="#uiobject-click" aria-hidden="true">#</a> UiObject.click()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>点击该控件，并返回是否点击成功。</p><p>如果该函数返回 false，可能是该控件不可点击(clickable 为 false)，当前界面无法响应该点击等。</p><h2 id="uiobject-longclick" tabindex="-1"><a class="header-anchor" href="#uiobject-longclick" aria-hidden="true">#</a> UiObject.longClick()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>长按该控件，并返回是否点击成功。</p><p>如果该函数返回 false，可能是该控件不可点击(longClickable 为 false)，当前界面无法响应该点击等。</p><h2 id="uiobject-settext-text" tabindex="-1"><a class="header-anchor" href="#uiobject-settext-text" aria-hidden="true">#</a> UiObject.setText(text)</h2><ul><li><code>text</code> {string} 文本</li><li><code>retrun</code> {Boolean}</li></ul><p>设置输入框控件的文本内容，并返回是否设置成功。</p><p>该函数只对可编辑的输入框(editable 为 true)有效。</p><h2 id="uiobject-copy" tabindex="-1"><a class="header-anchor" href="#uiobject-copy" aria-hidden="true">#</a> UiObject.copy()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对输入框文本的选中内容进行复制，并返回是否操作成功。</p><p>该函数只能用于输入框控件，并且当前输入框控件有选中的文本。可以通过<code>setSelection()</code>函数来设置输入框选中的内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> et <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//选中前两个字</span>
et<span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//对选中内容进行复制</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>et<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;复制成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;复制失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiobject-cut" tabindex="-1"><a class="header-anchor" href="#uiobject-cut" aria-hidden="true">#</a> UiObject.cut()</h2><p>对输入框文本的选中内容进行剪切，并返回是否操作成功。</p><p>该函数只能用于输入框控件，并且当前输入框控件有选中的文本。可以通过<code>setSelection()</code>函数来设置输入框选中的内容。</p><h2 id="uiobject-paste" tabindex="-1"><a class="header-anchor" href="#uiobject-paste" aria-hidden="true">#</a> UiObject.paste()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对输入框控件进行粘贴操作，把剪贴板内容粘贴到输入框中，并返回是否操作成功。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//设置剪贴板内容为“你好”</span>
<span class="token function">setClip</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> et <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
et<span class="token punctuation">.</span><span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiobject-setselection-start-end" tabindex="-1"><a class="header-anchor" href="#uiobject-setselection-start-end" aria-hidden="true">#</a> UiObject.setSelection(start, end)</h2><ul><li><code>start</code> {number} 选中内容起始位置</li><li><code>end</code> {number} 选中内容结束位置(不包括)</li><li><code>retrun</code> {Boolean}</li></ul><p>对输入框控件设置选中的文字内容，并返回是否操作成功。</p><p>索引是从 0 开始计算的；并且，选中内容不包含 end 位置的字符。例如，如果一个输入框内容为&quot;123456789&quot;，要选中&quot;4567&quot;的文字的代码为<code>et.setSelection(3, 7)</code>。</p><p>该函数也可以用来设置光标位置，只要参数的 end 等于 start，即可把输入框光标设置在 start 的位置。例如<code>et.setSelection(1, 1)</code>会把光标设置在第一个字符的后面。</p><h2 id="uiobject-scrollforward" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollforward" aria-hidden="true">#</a> UiObject.scrollForward()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对控件执行向前滑动的操作，并返回是否操作成功。</p><p>向前滑动包括了向右和向下滑动。如果一个控件既可以向右滑动和向下滑动，那么执行<code>scrollForward()</code>的行为是未知的(这是因为 Android 文档没有指出这一点，同时也没有充分的测试可供参考)。</p><h2 id="uiobject-scrollbackward" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollbackward" aria-hidden="true">#</a> UiObject.scrollBackward()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对控件执行向后滑动的操作，并返回是否操作成功。</p><p>向后滑动包括了向右和向下滑动。如果一个控件既可以向右滑动和向下滑动，那么执行<code>scrollForward()</code>的行为是未知的(这是因为 Android 文档没有指出这一点，同时也没有充分的测试可供参考)。</p><h2 id="uiobject-select" tabindex="-1"><a class="header-anchor" href="#uiobject-select" aria-hidden="true">#</a> UiObject.select()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对控件执行&quot;选中&quot;操作，并返回是否操作成功。&quot;选中&quot;和<code>isSelected()</code>的属性相关，但该操作十分少用。</p><h2 id="uiobject-collapse" tabindex="-1"><a class="header-anchor" href="#uiobject-collapse" aria-hidden="true">#</a> UiObject.collapse()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对控件执行折叠操作，并返回是否操作成功。</p><h2 id="uiobject-expand" tabindex="-1"><a class="header-anchor" href="#uiobject-expand" aria-hidden="true">#</a> UiObject.expand()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>对控件执行操作，并返回是否操作成功。</p><h2 id="uiobject-show" tabindex="-1"><a class="header-anchor" href="#uiobject-show" aria-hidden="true">#</a> UiObject.show()</h2><p>对集合中所有控件执行显示操作，并返回是否全部操作成功。</p><h2 id="uiobject-scrollup" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollup" aria-hidden="true">#</a> UiObject.scrollUp()</h2><p>对集合中所有控件执行向上滑的操作，并返回是否全部操作成功。</p><h2 id="uiobject-scrolldown" tabindex="-1"><a class="header-anchor" href="#uiobject-scrolldown" aria-hidden="true">#</a> UiObject.scrollDown()</h2><p>对集合中所有控件执行向下滑的操作，并返回是否全部操作成功。</p><h2 id="uiobject-scrollleft" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollleft" aria-hidden="true">#</a> UiObject.scrollLeft()</h2><p>对集合中所有控件执行向左滑的操作，并返回是否全部操作成功。</p><h2 id="uiobject-scrollright" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollright" aria-hidden="true">#</a> UiObject.scrollRight()</h2><p>对集合中所有控件执行向右滑的操作，并返回是否全部操作成功。</p><h2 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> children()</h2><ul><li><code>retrun</code> <a href="#uicollection">UiCollection</a></li></ul><p>返回该控件的所有子控件组成的控件集合。可以用于遍历一个控件的子控件，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="childcount" tabindex="-1"><a class="header-anchor" href="#childcount" aria-hidden="true">#</a> childCount()</h2><ul><li><code>retrun</code> {number}</li></ul><p>返回子控件数目。</p><h2 id="child-i" tabindex="-1"><a class="header-anchor" href="#child-i" aria-hidden="true">#</a> child(i)</h2><ul><li><code>i</code> {number} 子控件索引</li><li><code>retrun</code> {UiObject}</li></ul><p>返回第 i+1 个子控件。如果 i&gt;=控件数目或者小于 0，则抛出异常。</p><p>需要注意的是，由于布局捕捉的问题，该函数可能返回<code>null</code>，也就是可能获取不到某个子控件。</p><p>遍历子控件的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> child <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> parent()</h2><ul><li><code>retrun</code> {UiObject}</li></ul><p>返回该控件的父控件。如果该控件没有父控件，返回<code>null</code>。</p><h2 id="bounds" tabindex="-1"><a class="header-anchor" href="#bounds" aria-hidden="true">#</a> bounds()</h2><ul><li><code>retrun</code> <a href="#rect">Rect</a></li></ul><p>返回控件在屏幕上的范围，其值是一个<a href="#rect">Rect</a>对象。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;控件在屏幕上的范围为&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个控件本身无法通过<code>click()</code>点击，那么我们可以利用<code>bounds()</code>函数获取其坐标，再利用坐标点击。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;打开侧拉菜单&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">click</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果使用root权限，则用 Tap(b.centerX(), b.centerY());</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boundsinparent" tabindex="-1"><a class="header-anchor" href="#boundsinparent" aria-hidden="true">#</a> boundsInParent()</h2><ul><li><code>retrun</code> <a href="#rect">Rect</a></li></ul><p>返回控件在父控件中的范围，其值是一个<a href="#rect">Rect</a>对象。</p><h2 id="drawingorder" tabindex="-1"><a class="header-anchor" href="#drawingorder" aria-hidden="true">#</a> drawingOrder()</h2><ul><li><code>retrun</code> {number}</li></ul><p>返回控件在父控件中的绘制次序。该函数在安卓 7.0 及以上才有效，7.0 以下版本调用会返回 0。</p><h2 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> id()</h2><ul><li><code>retrun</code> {string}</li></ul><p>获取控件的 id，如果一个控件没有 id，则返回<code>null</code>。</p><h2 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text()</h2><ul><li><code>retrun</code> {string}</li></ul><p>获取控件的文本，如果控件没有文本，返回<code>&quot;&quot;</code>。</p><h2 id="findbytext-str" tabindex="-1"><a class="header-anchor" href="#findbytext-str" aria-hidden="true">#</a> findByText(str)</h2><ul><li><code>str</code> {string} 文本</li><li><code>retrun</code> <a href="#uicollection">UiCollection</a></li></ul><p>根据文本 text 在子控件中递归地寻找并返回文本或描述(desc)<strong>包含</strong>这段文本 str 的控件，返回它们组成的集合。</p><p>该函数会在当前控件的子控件，孙控件，曾孙控件...中搜索 text 或 desc 包含 str 的控件，并返回它们组合的集合。</p><h2 id="findone-selector" tabindex="-1"><a class="header-anchor" href="#findone-selector" aria-hidden="true">#</a> findOne(selector)</h2><ul><li><code>selector</code> <a href="#uiselector">UiSelector</a></li><li><code>retrun</code> <a href="#uiobject">UiOobject</a></li></ul><p>根据选择器 selector 在该控件的子控件、孙控件...中搜索符合该选择器条件的控件，并返回找到的第一个控件；如果没有找到符合条件的控件则返回<code>null</code>。</p><p>例如，对于酷安动态列表，我们可以遍历他的子控件(每个动态列表项)，并在每个子控件中依次寻找点赞数量和图标，对于点赞数量小于 10 的点赞：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//找出动态列表</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;recycler_view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//遍历动态</span>
list<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//找出点赞图标</span>
  <span class="token keyword">var</span> like <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;feed_action_view_like&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//找出点赞数量</span>
  <span class="token keyword">var</span> likeCount <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;text_view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//如果这两个控件没有找到就不继续了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>like <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> likeCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//判断点赞数量是否小于10</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>likeCount<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//点赞</span>
    like<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-selector" tabindex="-1"><a class="header-anchor" href="#find-selector" aria-hidden="true">#</a> find(selector)</h2><ul><li><code>selector</code> <a href="#uiselector">UiSelector</a></li><li><code>retrun</code> <a href="#uicollection">UiCollection</a></li></ul><p>根据选择器 selector 在该控件的子控件、孙控件...中搜索符合该选择器条件的控件，并返回它们组合的集合。</p><h1 id="uicollection" tabindex="-1"><a class="header-anchor" href="#uicollection" aria-hidden="true">#</a> UiCollection</h1><p>UiCollection, 控件集合, 通过选择器的<code>find()</code>, <code>untilFind()</code>方法返回的对象。</p><p>UiCollection&quot;继承&quot;于数组，实际上是一个 UiObject 的数组，因此可以使用数组的函数和属性，例如使用 length 属性获取 UiCollection 的大小，使用 forEach 函数来遍历 UiCollection。</p><p>例如，采用 forEach 遍历屏幕上所有的文本控件并打印出文本内容的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">log</span><span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用传统的数组遍历方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> uc <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> uc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> tv <span class="token operator">=</span> uc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UiCollection 的每一个元素都是 UiObject，我们可以取出他的元素进行操作，例如取出第一个 UiObject 并点击的代码为<code>ui[0].click()</code>。如果想要对该集合的所有元素进行操作，可以直接在集合上调用相应的函数，例如<code>uc.click()</code>，该代码会对集合上所有 UiObject 执行点击操作并返回是否全部点击成功。</p><p>因此，UiCollection 具有所有 UiObject 对控件操作的函数，包括<code>click()</code>, <code>longClick()</code>, <code>scrollForward()</code>等等，不再赘述。</p><h2 id="uicollection-size" tabindex="-1"><a class="header-anchor" href="#uicollection-size" aria-hidden="true">#</a> UiCollection.size()</h2><ul><li><code>retrun</code> {number}</li></ul><p>返回集合中的控件数。</p><p>历史遗留函数，相当于属性 length。</p><h2 id="uicollection-get-i" tabindex="-1"><a class="header-anchor" href="#uicollection-get-i" aria-hidden="true">#</a> UiCollection.get(i)</h2><ul><li><code>i</code> {number} 索引</li><li><code>retrun</code> <a href="#uiobject">UiObject</a></li></ul><p>返回集合中第 i+1 个控件(UiObject)。</p><p>历史遗留函数，建议直接使用数组下标的方式访问元素。</p><h2 id="uicollection-each-func" tabindex="-1"><a class="header-anchor" href="#uicollection-each-func" aria-hidden="true">#</a> UiCollection.each(func)</h2><ul><li><code>func</code> {Function} 遍历函数，参数为 UiObject。</li></ul><p>遍历集合。</p>`,216),q=a("code",null,"forEach",-1),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},j=e(`<h2 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>返回控件集合是否为空。</p><h2 id="nonempty" tabindex="-1"><a class="header-anchor" href="#nonempty" aria-hidden="true">#</a> nonEmpty()</h2><ul><li><code>retrun</code> {Boolean}</li></ul><p>返回控件集合是否非空。</p><h2 id="uicollection-find-selector" tabindex="-1"><a class="header-anchor" href="#uicollection-find-selector" aria-hidden="true">#</a> UiCollection.find(selector)</h2><ul><li><code>selector</code> <a href="#uiselector">UiSelector</a></li><li><code>retrun</code> <a href="#uicollection">UiCollection</a></li></ul><p>根据 selector 所确定的条件在该控件集合的控件、子控件、孙控件...中找到所有符合条件的控件并返回找到的控件集合。</p><p>注意这会递归地遍历控件集合里所有的控件以及他们的子控件。和数组的<code>filter</code>函数不同。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在集合</span>
<span class="token keyword">var</span> clickableNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uicollection-findone-selector" tabindex="-1"><a class="header-anchor" href="#uicollection-findone-selector" aria-hidden="true">#</a> UiCollection.findOne(selector)</h2><ul><li><code>selector</code> <a href="#uiselector">UiSelector</a></li><li><code>retrun</code> <a href="#uiobject">UiOobject</a></li></ul><p>根据选择器 selector 在该控件集合的控件的子控件、孙控件...中搜索符合该选择器条件的控件，并返回找到的第一个控件；如果没有找到符合条件的控件则返回<code>null</code>。</p><h1 id="rect" tabindex="-1"><a class="header-anchor" href="#rect" aria-hidden="true">#</a> Rect</h1><p><code>UiObject.bounds()</code>, <code>UiObject.boundsInParent()</code>返回的对象。表示一个长方形(范围)。</p><h2 id="rect-left" tabindex="-1"><a class="header-anchor" href="#rect-left" aria-hidden="true">#</a> Rect.left</h2><ul><li>{number}</li></ul><p>长方形左边界的 x 坐标、</p><h2 id="rect-right" tabindex="-1"><a class="header-anchor" href="#rect-right" aria-hidden="true">#</a> Rect.right</h2><ul><li>{number}</li></ul><p>长方形右边界的 x 坐标、</p><h2 id="rect-top" tabindex="-1"><a class="header-anchor" href="#rect-top" aria-hidden="true">#</a> Rect.top</h2><ul><li>{number}</li></ul><p>长方形上边界的 y 坐标、</p><h2 id="rect-bottom" tabindex="-1"><a class="header-anchor" href="#rect-bottom" aria-hidden="true">#</a> Rect.bottom</h2><ul><li>{number}</li></ul><p>长方形下边界的 y 坐标、</p><h2 id="rect-centerx" tabindex="-1"><a class="header-anchor" href="#rect-centerx" aria-hidden="true">#</a> Rect.centerX()</h2><ul><li><code>retrun</code> {number}</li></ul><p>长方形中点 x 坐标。</p><h2 id="rect-centery" tabindex="-1"><a class="header-anchor" href="#rect-centery" aria-hidden="true">#</a> Rect.centerY()</h2><ul><li><code>retrun</code> {number}</li></ul><p>长方形中点 y 坐标。</p><h2 id="rect-width" tabindex="-1"><a class="header-anchor" href="#rect-width" aria-hidden="true">#</a> Rect.width()</h2><ul><li><code>retrun</code> {number}</li></ul><p>长方形宽度。通常可以作为控件宽度。</p><h2 id="rect-height" tabindex="-1"><a class="header-anchor" href="#rect-height" aria-hidden="true">#</a> Rect.height()</h2><ul><li><code>retrun</code> {number}</li></ul><p>长方形高度。通常可以作为控件高度。</p><h2 id="rect-contains-r" tabindex="-1"><a class="header-anchor" href="#rect-contains-r" aria-hidden="true">#</a> Rect.contains(r)</h2><ul><li><code>r</code> <a href="#rect">Rect</a></li></ul><p>返回是否包含另一个长方形 r。包含指的是，长方形 r 在该长方形的里面(包含边界重叠的情况)。</p><h2 id="rect-intersect-r" tabindex="-1"><a class="header-anchor" href="#rect-intersect-r" aria-hidden="true">#</a> Rect.intersect(r)</h2><ul><li><code>r</code> <a href="#rect">Rect</a></li></ul><p>返回是否和另一个长方形相交。</p><h1 id="uiselector-进阶" tabindex="-1"><a class="header-anchor" href="#uiselector-进阶" aria-hidden="true">#</a> UiSelector 进阶</h1><p>未完待续。</p>`,49);function U(S,O){const c=o("Badge"),t=o("ExternalLinkIcon");return p(),l("div",null,[d,s(c,{type:"tip",text:"稳定",vertical:"middle"}),r,a("p",null,[n("有关正则表达式，可以查看"),a("a",h,[n("正则表达式 - 菜鸟教程"),s(t)]),n("。")]),k,a("p",null,[n("有关正则表达式，可以查看"),a("a",b,[n("正则表达式 - 菜鸟教程"),s(t)]),n("。")]),f,a("p",null,[n("有关正则表达式，可以查看"),a("a",m,[n("正则表达式 - 菜鸟教程"),s(t)]),n("。")]),v,a("p",null,[n("有关正则表达式，可以查看"),a("a",g,[n("正则表达式 - 菜鸟教程"),s(t)]),n("。")]),x,a("p",null,[n("历史遗留函数，相当于"),q,n("。参考"),a("a",w,[n("forEach"),s(t)]),n("。")]),j])}const _=i(u,[["render",U],["__file","widgetsBasedAutomation.html.vue"]]);export{_ as default};
