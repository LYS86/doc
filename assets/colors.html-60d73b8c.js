import{_ as c,M as r,p as i,q as t,N as a,R as o,t as e,a1 as l}from"./framework-c8e009f3.js";const d={},h=o("h1",{id:"颜色-colors",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#颜色-colors","aria-hidden":"true"},"#"),e(" 颜色-colors")],-1),u=l('<p>在 Auto.js 有两种方式表示一个颜色。 一种是使用一个字符串&quot;#AARRGGBB&quot;或&quot;#RRGGBB&quot;，其中 AA 是 Alpha 通道(透明度)的值，RR 是 R 通道(红色)的值，GG 是 G 通道(绿色)的值，BB 是 B 通道(蓝色)的值。例如&quot;#ffffff&quot;表示白色, &quot;#7F000000&quot;表示半透明的黑色。 另一种是使用一个 16 进制的&quot;32 位整数&quot; 0xAARRGGBB 来表示一个颜色，例如 <code>0xFF112233</code>表示颜色&quot;#112233&quot;, <code>0x11223344</code>表示颜色&quot;#11223344&quot;。 可以通过<code>colors.toString()</code>把颜色整数转换为字符串，通过<code>colors.parseColor()</code>把颜色字符串解析为颜色整数。</p><h2 id="colors-tostring-color" tabindex="-1"><a class="header-anchor" href="#colors-tostring-color" aria-hidden="true">#</a> colors.toString(color)</h2><ul><li><code>color</code> {number} 整数 RGB 颜色值</li><li>返回 {string}</li></ul><p>返回颜色值的字符串，格式为 &quot;#AARRGGBB&quot;。</p><h2 id="colors-red-color" tabindex="-1"><a class="header-anchor" href="#colors-red-color" aria-hidden="true">#</a> colors.red(color)</h2><ul><li><code>color</code> {number} | {string} 颜色值</li><li>返回 {number}</li></ul><p>返回颜色 color 的 R 通道的值，范围 0~255.</p><h2 id="colors-green-color" tabindex="-1"><a class="header-anchor" href="#colors-green-color" aria-hidden="true">#</a> colors.green(color)</h2><ul><li><code>color</code> {number} | {string} 颜色值</li><li>返回 {number}</li></ul><p>返回颜色 color 的 G 通道的值，范围 0~255.</p><h2 id="colors-blue-color" tabindex="-1"><a class="header-anchor" href="#colors-blue-color" aria-hidden="true">#</a> colors.blue(color)</h2><ul><li><code>color</code> {number} | {string} 颜色值</li><li>返回 {number}</li></ul><p>返回颜色 color 的 B 通道的值，范围 0~255.</p><h2 id="colors-alpha-color" tabindex="-1"><a class="header-anchor" href="#colors-alpha-color" aria-hidden="true">#</a> colors.alpha(color)</h2><ul><li><code>color</code> {number} | {string} 颜色值</li><li>返回 {number}</li></ul><p>返回颜色 color 的 Alpha 通道的值，范围 0~255.</p><h2 id="colors-rgb-red-green-blue" tabindex="-1"><a class="header-anchor" href="#colors-rgb-red-green-blue" aria-hidden="true">#</a> colors.rgb(red, green, blue)</h2><ul><li><code>red</code> {number} 颜色的 R 通道的值</li><li><code>blue</code> {number} 颜色的 G 通道的值</li><li><code>green</code> {number} 颜色的 B 通道的值</li><li>返回 {number}</li></ul><p>返回这些颜色通道构成的整数颜色值。Alpha 通道将是 255（不透明）。</p><h2 id="colors-argb-alpha-red-green-blue" tabindex="-1"><a class="header-anchor" href="#colors-argb-alpha-red-green-blue" aria-hidden="true">#</a> colors.argb(alpha, red, green, blue)</h2><ul><li><code>alpha</code> {number} 颜色的 Alpha 通道的值</li><li><code>red</code> {number} 颜色的 R 通道的值</li><li><code>green</code> {number} 颜色的 G 通道的值</li><li><code>blue</code> {number} 颜色的 B 通道的值</li><li>返回 {number}</li></ul><p>返回这些颜色通道构成的整数颜色值。</p><h2 id="colors-parsecolor-colorstr" tabindex="-1"><a class="header-anchor" href="#colors-parsecolor-colorstr" aria-hidden="true">#</a> colors.parseColor(colorStr)</h2><ul><li><code>colorStr</code> {string} 表示颜色的字符串，例如&quot;#112233&quot;</li><li>返回 {number}</li></ul><p>返回颜色的整数值。</p><h2 id="colors-issimilar-color2-color2-threshold-algorithm" tabindex="-1"><a class="header-anchor" href="#colors-issimilar-color2-color2-threshold-algorithm" aria-hidden="true">#</a> colors.isSimilar(color2, color2[, threshold, algorithm])</h2>',26),p=o("li",null,[o("code",null,"color1"),e(" {number} | {string} 颜色值 1")],-1),b=o("li",null,[o("code",null,"color1"),e(" {number} | {string} 颜色值 2")],-1),g=o("li",null,[o("code",null,"threshold"),e(" {number} 颜色相似度临界值，默认为 4。取值范围为 0~255。这个值越大表示允许的相似程度越小，如果这个值为 0，则两个颜色相等时该函数才会返回 true。")],-1),f=o("code",null,"algorithm",-1),m=o("li",null,[o("code",null,"diff"),e(": 差值匹配。与给定颜色的 R、G、B 差的绝对值之和小于 threshold 时匹配。")],-1),F=o("li",null,[o("code",null,"rgb"),e(": rgb 欧拉距离相似度。与给定颜色 color 的 rgb 欧拉距离小于等于 threshold 时匹配。")],-1),_=o("code",null,"rgb+",-1),x={href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer"},k=o("li",null,[o("code",null,"hs"),e(": hs 欧拉距离匹配。hs 为 HSV 空间的色调值。")],-1),q=o("li",null,"返回 {Boolean}",-1),B=l(`<p>返回两个颜色是否相似。</p><h2 id="colors-equals-color1-color2" tabindex="-1"><a class="header-anchor" href="#colors-equals-color1-color2" aria-hidden="true">#</a> colors.equals(color1, color2)</h2><ul><li><code>color1</code> {number} | {string} 颜色值 1</li><li><code>color1</code> {number} | {string} 颜色值 2</li><li>返回 {Boolean}</li></ul><p>返回两个颜色是否相等。<strong>注意该函数会忽略 Alpha 通道的值进行比较</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;#112233&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#112234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0xff112233</span><span class="token punctuation">,</span> <span class="token number">0xff223344</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="colors-black" tabindex="-1"><a class="header-anchor" href="#colors-black" aria-hidden="true">#</a> colors.BLACK</h2><p>黑色，颜色值 #FF000000</p><h2 id="colors-dkgray" tabindex="-1"><a class="header-anchor" href="#colors-dkgray" aria-hidden="true">#</a> colors.DKGRAY</h2><p>深灰色，颜色值 #FF444444</p><h2 id="colors-gray" tabindex="-1"><a class="header-anchor" href="#colors-gray" aria-hidden="true">#</a> colors.GRAY</h2><p>灰色，颜色值 #FF888888</p><h2 id="colors-ltgray" tabindex="-1"><a class="header-anchor" href="#colors-ltgray" aria-hidden="true">#</a> colors.LTGRAY</h2><p>亮灰色，颜色值 #FFCCCCCC</p><h2 id="colors-white" tabindex="-1"><a class="header-anchor" href="#colors-white" aria-hidden="true">#</a> colors.WHITE</h2><p>白色，颜色值 #FFFFFFFF</p><h2 id="colors-red" tabindex="-1"><a class="header-anchor" href="#colors-red" aria-hidden="true">#</a> colors.RED</h2><p>红色，颜色值 #FFFF0000</p><h2 id="colors-green" tabindex="-1"><a class="header-anchor" href="#colors-green" aria-hidden="true">#</a> colors.GREEN</h2><p>绿色，颜色值 #FF00FF00</p><h2 id="colors-blue" tabindex="-1"><a class="header-anchor" href="#colors-blue" aria-hidden="true">#</a> colors.BLUE</h2><p>蓝色，颜色值 #FF0000FF</p><h2 id="colors-yellow" tabindex="-1"><a class="header-anchor" href="#colors-yellow" aria-hidden="true">#</a> colors.YELLOW</h2><p>黄色，颜色值 #FFFFFF00</p><h2 id="colors-cyan" tabindex="-1"><a class="header-anchor" href="#colors-cyan" aria-hidden="true">#</a> colors.CYAN</h2><p>青色，颜色值 #FF00FFFF</p><h2 id="colors-magenta" tabindex="-1"><a class="header-anchor" href="#colors-magenta" aria-hidden="true">#</a> colors.MAGENTA</h2><p>品红色，颜色值 #FFFF00FF</p><h2 id="colors-transparent" tabindex="-1"><a class="header-anchor" href="#colors-transparent" aria-hidden="true">#</a> colors.TRANSPARENT</h2><p>透明，颜色值 #00000000</p>`,29);function A(R,G){const n=r("Badge"),s=r("ExternalLinkIcon");return i(),t("div",null,[h,a(n,{type:"tip",text:"稳定",vertical:"middle"}),u,o("ul",null,[p,b,g,o("li",null,[f,e(' {string} 颜色匹配算法，默认为"diff", 包括: '),o("ul",null,[m,F,o("li",null,[_,e(": 加权 rgb 欧拉距离匹配("),o("a",x,[e("LAB Delta E"),a(s)]),e(")。")]),k])]),q]),B])}const C=c(d,[["render",A],["__file","colors.html.vue"]]);export{C as default};
