import{_ as i,M as o,p as c,q as r,N as l,t as n,R as e,a1 as a}from"./framework-c8e009f3.js";const d={},u=e("h1",{id:"ml-kit-ocr",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ml-kit-ocr","aria-hidden":"true"},"#"),n(" ML kit OCR")],-1),p=e("h2",{id:"gmlkit-ocr-img-language",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gmlkit-ocr-img-language","aria-hidden":"true"},"#"),n(" gmlkit.ocr(img, language)")],-1),h=e("p",null,"对给定的图像进行文字识别。",-1),g=e("li",null,[e("code",null,"img"),n(" {Image} 图片")],-1),_=e("code",null,"Language",-1),m=a("<li><code>la</code> 拉丁</li><li><code>zh</code> 中文</li><li><code>sa</code> 梵文</li><li><code>ja</code> 日语</li><li><code>ko</code> 韩语</li>",5),k={href:"https://developers.google.com/ml-kit/vision/text-recognition/v2/languages?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},v=e("li",null,[e("code",null,"retrun"),n("{"),e("a",{href:"#Result"},"Result"),n("} 文字识别结果。")],-1),f=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 识别中文</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> gmlkit<span class="token punctuation">.</span><span class="token function">ocr</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gmlkit-ocrtext-img-language" tabindex="-1"><a class="header-anchor" href="#gmlkit-ocrtext-img-language" aria-hidden="true">#</a> gmlkit.ocrText(img, language)</h2><p>对给定的图像进行文字识别，并返回识别到的文本字符串。</p>`,3),b=e("li",null,[e("code",null,"img"),n(" {Image} 图片")],-1),x=e("code",null,"Language",-1),R=a("<li><code>la</code> 拉丁</li><li><code>zh</code> 中文</li><li><code>sa</code> 梵文</li><li><code>ja</code> 日语</li><li><code>ko</code> 韩语</li>",5),y={href:"https://developers.google.com/ml-kit/vision/text-recognition/v2/languages?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},N=e("li",null,[e("code",null,"retrun"),n(" {String} 识别到的文本字符串。")],-1),j=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 识别中文</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> gmlkit<span class="token punctuation">.</span><span class="token function">ocrText</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h2><p>表示 Google ML Kit 文字识别返回的结果,有以下几个属性：</p>`,3),A=e("li",null,[e("code",null,"level"),n(" {Number} 结果的层级。")],-1),z=e("li",null,[e("code",null,"confidence"),n(" {Number} 识别结果的置信度。")],-1),L=e("li",null,[e("code",null,"text"),n(" {String} 识别到的文本。")],-1),S=e("li",null,[e("code",null,"language"),n(" {String} 识别到的语言。")],-1),q=e("code",null,"bounds",-1),B={href:"https://developer.android.google.cn/reference/kotlin/android/graphics/Rect?hl=en",target:"_blank",rel:"noopener noreferrer"},F=e("li",null,[e("code",null,"children"),n(" {Array} 子列表，包含更详细的内容。")],-1),I=a('<h3 id="result-find-predicate" tabindex="-1"><a class="header-anchor" href="#result-find-predicate" aria-hidden="true">#</a> Result.find(predicate)</h3><p>查找符合条件的第一个元素，没找到则返回 <code>null</code>。</p><ul><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Result}</li></ul><h3 id="result-find-level-predicate" tabindex="-1"><a class="header-anchor" href="#result-find-level-predicate" aria-hidden="true">#</a> Result.find(level,predicate)</h3><p>查找指定层级中符合条件的第一个元素，没找到则返回 <code>null</code>。</p><ul><li><code>level</code> {Number} 指定的层级。</li><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Result}</li></ul><h3 id="result-filter-predicate" tabindex="-1"><a class="header-anchor" href="#result-filter-predicate" aria-hidden="true">#</a> Result.filter(predicate)</h3><p>查找符合条件的所有元素</p><ul><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-filter-level-predicate" tabindex="-1"><a class="header-anchor" href="#result-filter-level-predicate" aria-hidden="true">#</a> Result.filter(level,predicate)</h3><p>在指定层级中查找符合条件的所有元素</p><ul><li><code>level</code> {Number} 指定的层级。</li><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-toarray" tabindex="-1"><a class="header-anchor" href="#result-toarray" aria-hidden="true">#</a> Result.toArray()</h3><p>将结果转换成数组</p><ul><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-toarray-level" tabindex="-1"><a class="header-anchor" href="#result-toarray-level" aria-hidden="true">#</a> Result.toArray(level)</h3><p>将指定层级结果转换成数组</p><ul><li><code>level</code> {Number} 层级</li><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-sort" tabindex="-1"><a class="header-anchor" href="#result-sort" aria-hidden="true">#</a> Result.sort()</h3><p>根据<code>bounds</code>的位置对原结果进行排序</p><h3 id="result-sorted" tabindex="-1"><a class="header-anchor" href="#result-sorted" aria-hidden="true">#</a> Result.sorted()</h3><p>同上,返回排序后的 Result 对象</p><ul><li><p><code>return</code> {Result}</p></li></ul>',23);function J(V,w){const s=o("Badge"),t=o("ExternalLinkIcon");return c(),r("div",null,[u,l(s,{type:"tip",text:"6.3.4+",vertical:"middle"}),n(),l(s,{type:"warning",text:"实验",vertical:"middle"}),p,h,e("ul",null,[g,e("li",null,[_,n(" {String} 识别语言，可选值为： "),e("ul",null,[m,e("li",null,[e("a",k,[n("其他语言"),l(t)])])])]),v]),f,e("ul",null,[b,e("li",null,[x,n(" {String} 识别语言，可选值为： "),e("ul",null,[R,e("li",null,[e("a",y,[n("其他语言"),l(t)])])])]),N]),j,e("ul",null,[A,z,L,S,e("li",null,[q,n(" {"),e("a",B,[n("Rect"),l(t)]),n("} 文本在图片中的位置")]),F]),I])}const M=i(d,[["render",J],["__file","gmlkit.html.vue"]]);export{M as default};
