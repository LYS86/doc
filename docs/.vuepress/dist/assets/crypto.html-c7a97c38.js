import{_ as t,M as o,p as c,q as p,R as n,t as s,N as i,a1 as a}from"./framework-5866ffd3.js";const l={},d=a(`<h1 id="crypto" tabindex="-1"><a class="header-anchor" href="#crypto" aria-hidden="true">#</a> $crypto</h1><p>$crypto 模块提供了对称加密（例如 AES）、非对称加密（例如 RSA）、消息摘要（例如 MD5, SHA）等支持。</p><h2 id="crypto-key-data-options" tabindex="-1"><a class="header-anchor" href="#crypto-key-data-options" aria-hidden="true">#</a> $crypto.Key(data,[options])</h2><ul><li><code>data</code> {any} 密钥的内容，根据 <code>options.input</code> 指定 <code>data</code> 的数据类型，默认为 string</li><li><code>options</code> {Object} 密钥配置 <a href="#options">options</a></li><li><code>return</code> {Object} key <ul><li><code>keyPair</code> 密钥对对象。可以通过<code>$crypto.generateKeyPair</code>函数生成，或通过构造函数构造。</li><li><code>data</code> 是 Key 的二进制数据。</li></ul></li></ul><p>构造函数，构造一个 Key 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">&quot;测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-generatekeypair-algorithm-length" tabindex="-1"><a class="header-anchor" href="#crypto-generatekeypair-algorithm-length" aria-hidden="true">#</a> $crypto.generateKeyPair(algorithm, [length])</h2><ul><li><code>algorithm</code> {string} 加密算法，可选值有： <ul><li><code>DH</code></li><li><code>DSA</code></li><li><code>EC</code></li><li><code>RSA</code></li></ul></li><li><code>length</code> {number} 密钥长度。和算法相关，例如以位数指定的模数长度。默认为 256。</li><li><code>return</code> {Object} <ul><li><code>privateKey</code> 私钥</li><li><code>publicKey</code> 公钥</li></ul></li></ul><p>生成一对密钥，包括公钥和私钥。 例如在 RSA 加密算法中，我们可以用私钥加密，公钥解密做签名； 或者公钥加密，私钥解密做数据加密。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 明文</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;未加密字符串&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 生成RSA密钥</span>
<span class="token keyword">let</span> keyPair <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;密钥对: &quot;</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用私钥加密</span>
<span class="token keyword">let</span> rsa <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA/ECB/PKCS1padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;RSA私钥加密后二进制数据: &quot;</span><span class="token punctuation">,</span> rsa<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用公钥解密</span>
<span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&quot;RSA公钥解密: &quot;</span><span class="token punctuation">,</span>
  $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>rsa<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA/ECB/PKCS1padding&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-digest-message-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-digest-message-algorithm-options" aria-hidden="true">#</a> $crypto.digest(message, algorithm[, options])</h2><ul><li><code>data</code> {any} 需要进行消息摘要的消息</li><li><code>algorithm</code> {string} 消息摘要算法，包括： <ul><li><code>MD5</code></li><li><code>SHA-1</code></li><li><code>SHA-224</code></li><li><code>SHA-256</code></li><li><code>SHA-384</code></li></ul></li><li><code>SHA-512</code> 具体可参阅 MessageDigest</li><li><code>options</code> {Object} 用于指定输入与输出的类型与格式 <a href="#options">options</a></li><li><code>return</code> {any} 根据 <code>options</code> 指定的输出类型返回不同数据</li></ul><p>对数据 <code>data</code> 用算法 <code>algorithm</code> 计算消息摘要。 数据 <code>data</code> 可以是文件、二进制、base64、hex、字符串等数据， 解密后数据可以返回二进制、base64、hex、字符串或者直接写入到文件中，具体参见输入与输出的类型与格式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 字符串消息摘要</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello, Autox.js&quot;</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;字符串: &quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出md5算法的hex值</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MD5: &quot;</span><span class="token punctuation">,</span> $crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出base64</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MD5 [base64]: &quot;</span><span class="token punctuation">,</span> $crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token string">&quot;/sdcard/脚本/_test_for_message_digest.js&quot;</span><span class="token punctuation">;</span>
files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件: &quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//从文件读取数据进行摘要</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MD5: &quot;</span><span class="token punctuation">,</span> $crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-encrypt-data-key-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-encrypt-data-key-algorithm-options" aria-hidden="true">#</a> $crypto.encrypt(data, key, algorithm[, options])</h2>`,15),u=n("li",null,[n("code",null,"data"),s(" {any} 明文消息，根据 "),n("code",null,"options.input"),s(" 指定的输入类型为不同格式的参数")],-1),r=n("li",null,[n("code",null,"key"),s(" {Key} 加密密钥。对称加密算法使用单个密钥，非对称加密则需要生成密钥对，参见 Key")],-1),k=n("code",null,"algorithm",-1),g=a("<li><code>AES</code></li><li><code>AES/ECB/NoPadding</code></li><li><code>AES/ECB/PKCS5Padding</code></li><li><code>AES/CBC/NoPadding</code></li><li><code>AES/CBC/PKCS5Padding</code></li><li><code>AES/CFB/NoPadding</code></li><li><code>AES/CFB/PKCS5Padding</code></li><li><code>AES/CTR/NoPadding</code></li><li><code>AES/CTR/PKCS5Padding</code></li><li><code>AES/OFB/PKCS5Padding</code></li><li><code>RSA/ECB/PKCS1Padding</code></li><li><code>RSA/ECB/NoPadding</code></li>",12),h=n("code",null,"...",-1),y={href:"https://developer.android.google.cn/reference/javax/crypto/Cipher?hl=en",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[n("code",null,"options"),s(" {Object} 用于指定输入与输出的类型与格式 "),n("a",{href:"#options"},"options")],-1),v=n("li",null,[n("code",null,"return"),s(" {any} 根据"),n("a",{href:"#options"},"options"),s(" 指定的输出类型返回不同数据")],-1),b=a('<p>使用密钥 <code>key</code> 对数据 <code>data</code> 用加密算法 <code>algorithm</code> 进行加密， 数据 <code>data</code> 可以是文件、二进制、base64、hex、字符串等数据，加密后数据可以返回二进制、base64、hex、字符串或者直接写入到文件中，具体参见输入与输出的类型与格式。</p><h2 id="crypto-decrypt-data-key-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-decrypt-data-key-algorithm-options" aria-hidden="true">#</a> $crypto.decrypt(data, key, algorithm[, options])</h2><p>参考 <code>$crypto.encrypt</code></p><p>对数据进行解密</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><ul><li><p><code>options</code> {object} 用于指定加解密、消息摘要时输入和输出的类型与格式。</p><ul><li><p><code>input</code> {string} 输入类型，若输入字符串，默认为 <code>string</code>；否则认为 <code>bytes</code>。可选的值包括：</p><ul><li><code>string</code> 字符串格式的数据</li><li><code>base64</code> base64 格式的数据</li><li><code>hex</code> base16 格式的数据</li><li><code>bytes</code> Java 二进制字节数组</li><li><code>file</code> 文件类型，将参数作为路径,从文件读取数据进行加解密</li></ul></li><li><p><code>output</code> {string} 输出类型，用于指定加密、解密、摘要后的数据的类型。 对于加解密，默认为 <code>bytes</code>；对于消息摘要，默认为 <code>hex</code>。可选的值包括：</p><ul><li><code>string</code> 字符串格式的数据</li><li><code>base64</code> base64 格式的数据</li><li><code>hex</code> base16 格式的数据</li><li><code>bytes</code> Java 二进制字节数组</li><li><code>file</code> 文件类型，将处理后的数据写入到文件中，必须同时制定 dest 参数</li></ul></li><li><p><code>dest</code> {string} 输出文件路径，<code>output</code> 类型为 file 时，用于指定加密、解密、摘要后输出文件的路径</p></li><li><p><code>encoding</code> {string} 编码格式，<code>input</code> 类型为 string 时，用于指定输入字符串转为二进制数据所使用的字符编码；<code>output</code> 类型为 string 时，用于指定输出数据转为字符串数据所使用的字符编码。默认为 utf-8</p></li></ul></li></ul>',6);function f(q,_){const e=o("ExternalLinkIcon");return c(),p("div",null,[d,n("ul",null,[u,r,n("li",null,[k,s(" {string} 加密算法，包括： "),n("ul",null,[g,n("li",null,[h,s(" 具体可参阅 "),n("a",y,[s("javax.crypto.Cipher"),i(e)])])])]),m,v]),b])}const A=t(l,[["render",f],["__file","crypto.html.vue"]]);export{A as default};
