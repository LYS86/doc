import{_ as t,M as s,p as i,q as o,R as e,t as a,N as c,a1 as l}from"./framework-5866ffd3.js";const r={},d=l(`<h1 id="ml-kit-ocr" tabindex="-1"><a class="header-anchor" href="#ml-kit-ocr" aria-hidden="true">#</a> ML kit OCR</h1><blockquote><p>Google ML Kit OCR 在 6.3.4 版本加入</p></blockquote><h2 id="gmlkit-ocr-img-language" tabindex="-1"><a class="header-anchor" href="#gmlkit-ocr-img-language" aria-hidden="true">#</a> gmlkit.ocr(img, language)</h2><p>对给定的图像进行文字识别。</p><ul><li><code>img</code> {Image} 图片</li><li><code>Language</code> {String} 识别语言，可选值为： <ul><li><code>la</code> 拉丁</li><li><code>zh</code> 中文</li><li><code>sa</code> 梵文</li><li><code>ja</code> 日语</li><li><code>ko</code> 韩语</li><li>其他语言</li></ul></li><li><code>retrun</code>{<a href="#Result">Result</a>} 文字识别结果。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 识别中文</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> gmlkit<span class="token punctuation">.</span><span class="token function">ocr</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gmlkit-ocrtext-img-language" tabindex="-1"><a class="header-anchor" href="#gmlkit-ocrtext-img-language" aria-hidden="true">#</a> gmlkit.ocrText(img, language)</h2><p>对给定的图像进行文字识别，并返回识别到的文本字符串。</p><ul><li><code>img</code> {Image} 图片</li><li><code>Language</code> {String} 识别语言，可选值为： <ul><li><code>la</code> 拉丁</li><li><code>zh</code> 中文</li><li><code>sa</code> 梵文</li><li><code>ja</code> 日语</li><li><code>ko</code> 韩语</li><li>其他语言</li></ul></li><li><code>retrun</code> {String} 识别到的文本字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 识别中文</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> gmlkit<span class="token punctuation">.</span><span class="token function">ocrText</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h2><p>表示 Google ML Kit 文字识别返回的结果,有以下几个属性：</p>`,12),u=e("li",null,[e("code",null,"level"),a(" {Number} 结果的层级。")],-1),p=e("li",null,[e("code",null,"confidence"),a(" {Number} 识别结果的置信度。")],-1),h=e("li",null,[e("code",null,"text"),a(" {String} 识别到的文本。")],-1),g=e("li",null,[e("code",null,"language"),a(" {String} 识别到的语言。")],-1),k=e("code",null,"bounds",-1),m={href:"https://developer.android.google.cn/reference/kotlin/android/graphics/Rect?hl=en",target:"_blank",rel:"noopener noreferrer"},v=e("li",null,[e("code",null,"children"),a(" {Array} 子列表，包含更详细的内容。")],-1),f=l('<h3 id="result-find-predicate" tabindex="-1"><a class="header-anchor" href="#result-find-predicate" aria-hidden="true">#</a> Result.find(predicate)</h3><p>查找符合条件的第一个元素，没找到则返回 <code>null</code>。</p><ul><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Result}</li></ul><h3 id="result-find-level-predicate" tabindex="-1"><a class="header-anchor" href="#result-find-level-predicate" aria-hidden="true">#</a> Result.find(level,predicate)</h3><p>查找指定层级中符合条件的第一个元素，没找到则返回 <code>null</code>。</p><ul><li><code>level</code> {Number} 指定的层级。</li><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Result}</li></ul><h3 id="result-filter-predicate" tabindex="-1"><a class="header-anchor" href="#result-filter-predicate" aria-hidden="true">#</a> Result.filter(predicate)</h3><p>查找符合条件的所有元素</p><ul><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Array} Java数组</li></ul><h3 id="result-filter-level-predicate" tabindex="-1"><a class="header-anchor" href="#result-filter-level-predicate" aria-hidden="true">#</a> Result.filter(level,predicate)</h3><p>在指定层级中查找符合条件的所有元素</p><ul><li><code>level</code> {Number} 指定的层级。</li><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Array} Java数组</li></ul><h3 id="result-toarray" tabindex="-1"><a class="header-anchor" href="#result-toarray" aria-hidden="true">#</a> Result.toArray()</h3><p>将结果转换成数组</p><ul><li><code>return</code> {Array} Java数组</li></ul><h3 id="result-toarray-level" tabindex="-1"><a class="header-anchor" href="#result-toarray-level" aria-hidden="true">#</a> Result.toArray(level)</h3><p>将指定层级结果转换成数组</p><ul><li><code>level</code> {Number} 层级</li><li><code>return</code> {Array} Java数组</li></ul><h3 id="result-sort" tabindex="-1"><a class="header-anchor" href="#result-sort" aria-hidden="true">#</a> Result.sort()</h3><p>根据<code>bounds</code>的位置对原结果进行排序</p><h3 id="result-sorted" tabindex="-1"><a class="header-anchor" href="#result-sorted" aria-hidden="true">#</a> Result.sorted()</h3><p>同上,返回排序后的 Result 对象</p><ul><li><code>return</code> {Result}</li></ul>',23);function _(b,x){const n=s("ExternalLinkIcon");return i(),o("div",null,[d,e("ul",null,[u,p,h,g,e("li",null,[k,a(" {"),e("a",m,[a("Rect"),c(n)]),a("} 文本在图片中的位置")]),v]),f])}const y=t(r,[["render",_],["__file","gmlkit.html.vue"]]);export{y as default};
